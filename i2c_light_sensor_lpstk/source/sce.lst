               .deffile adi_defs__1.asm
               .deffile ddi_defs__1.asm
               .deffile reg_defs__1.asm
               .deffile sce_defs__1.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Sensor Controller clock frequency in active mode
               .define ACTIVE_MODE_SCE_CLK_FREQ_MHZ    24

               ; Resource-specified definitions, if any
               .define AUXIO_I2C_SCL           14
               .define AUXIO_I2C_SDA           13
               .define I2C_BASE_DELAY          9
               .define I2C_EXT_DELAY           4
               .define I2C_STRETCH_TIMEOUT_US  10
               .define I2C_WAIT_STRETCH_DELAY  5


               .segment begin "Framework"


               VectorTable:
                                       ; SW 0
0000 ---- 140e                         jsr         PowerUp
0001 ---- 0417                         jmp         TaskCtrlReqVector
                                       ; SW 1
0002 ---- 140e                         jsr         PowerUp
0003 ---- 0440                         jmp         EventManTrigVector
                                       ; PROG 0
0004 ---- 140e                         jsr         PowerUp
0005 ---- 044a                         jmp         AonRtcCh2Vector
                                       ; PROG 1
0006 ---- 140e                         jsr         PowerUp
0007 ---- 0467                         jmp         Event0Vector
                                       ; PROG 2
0008 ---- 140e                         jsr         PowerUp
0009 ---- 0470                         jmp         Event1Vector
                                       ; PROG 3
000a ---- 140e                         jsr         PowerUp
000b ---- 0479                         jmp         Event2Vector
                                       ; SW 2
000c ---- 140e                         jsr         PowerUp
000d ---- 0482                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Make sure that the last operation mode request has taken effect
000e ---- 8953                         in          R0, [#IOP_SYSIF_OPMODEREQ]
000f ---- 9954 /waitForOpmodeSync:     in          R1, [#IOP_SYSIF_OPMODEACK]
0010 ---- 8d29                         cmp         R0, R1
0011 ---- befd                         bneq        /waitForOpmodeSync

                                       ; Deassert the power-down request
0012 ---- 4553                         iobclr      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
0013 ---- 2554 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEACK]
0014 ---- aefe                         biob1       /waitForOpmodeAck

                                       ; Prevent wake-up events from propagating to the AON domain
0015 ---- 445c                         iobclr      #0, [#IOP_SYSIF_WUGATE]

               FwEmptyFunc:            ; Done
0016 ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear wake-up event
0017 ---- 745b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU0, [#IOP_SYSIF_WUFLAGSCLR]
0018 ---- 545b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU0, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; For each task ...
0019 ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
001a ---- 7cac                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
001b ---- 68b5                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001c ---- 00a7                             ld          R0, #pFwTaskInitializeFuncTable
001d ---- 1439                             jsr         /handleReq

                                           ; Handle execute request, if any
001e ---- 68b6                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
001f ---- 00a8                             ld          R0, #pFwTaskExecuteFuncTable
0020 ---- 1439                             jsr         /handleReq

                                           ; Handle terminate request, if any
0021 ---- 68b7                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0022 ---- 00a9                             ld          R0, #pFwTaskTerminateFuncTable
0023 ---- 1439                             jsr         /handleReq

                                           ; Move on to the next task
0024 ---- 78ac                             ld          R7, [#fwCtrlInt/taskId]
0025 ---- f801                             add         R7, #1

0026 ---- fa01                         cmp         R7, #TASK_COUNT
0027 ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
0028 ---- 78b3                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
0029 ---- 68b5                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
002a ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
002b ---- 68b7                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
002c ---- ed92                         inv         R6
002d ---- fd06                         and         R7, R6
002e ---- 7cb3                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; Has the run-time logging application requested locked struct access?
002f ---- 78b2                         ld          R7, [#fwCtrlInt/rtlStructLockReq]
0030 ---- fa01                         cmp         R7, #1
0031 ---- be05                         bneq        /noRtlStructWriteReq

                                           ; Signalize that we're ready
0032 ---- 7002                             ld          R7, #2
0033 ---- 7cb2                             st          R7, [#fwCtrlInt/rtlStructLockReq]

               /waitRtlStructWriteLoop:    ; Wait until the run-time logging application is done
0034 ---- 78b2                             ld          R7, [#fwCtrlInt/rtlStructLockReq]
0035 ---- fa00                             cmp         R7, #0
0036 ---- befd                             bneq        /waitRtlStructWriteLoop
               /noRtlStructWriteReq:
                                       ; We're READY for another request
0037 ---- 6440                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0038 ---- 0487                         jmp         PowerDownSequence;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0039 ---- 78ac                         ld          R7, [#fwCtrlInt/taskId]
003a ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
003b ---- ed8f                         lsr         R6, R7
003c ---- ec01                         tst         R6, #0x0001
003d ---- be01                         bnz         /noSkip
003e ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
003f ---- 8db7                         jmp         R0




               EventManTrigVector:
                                       ; Clear wake-up event
0040 ---- 755b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU1, [#IOP_SYSIF_WUFLAGSCLR]
0041 ---- 555b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU1, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Reconfigure the programmable wake-up, and trigger it
0042 ---- 78b1                         ld          R7, [#fwCtrlInt/progwucfgManTrigReg]
0043 ---- 60bf                         ld          R6, #(BV_SYSIF_PROGWUCFG_POL | SYSIF_PROGWUCFG_SRC_NO_EVENT)
0044 ---- ef27                         out         R6, [R7]
0045 ---- e240                         or          R6, #BV_SYSIF_PROGWUCFG_EN
0046 ---- ef27                         out         R6, [R7]

                                       ; Indicate completion
0047 ---- 7000                         ld          R7, #0x0000
0048 ---- 7cb1                         st          R7, [#fwCtrlInt/progwucfgManTrigReg]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0049 ---- 0487                         jmp         PowerDownSequence;




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
004a ---- 6477                         iobset      #0, [#IOP_SYSIF_RTCEVCLR]

                                       ; For each task (R0 is the current task ID) ...
004b ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
004c ---- 18b3                             ld          R1, [#fwCtrlExt/bvActiveTasks]
004d ---- 9d88                             lsr         R1, R0
004e ---- 9c01                             tst         R1, #0x0001
004f ---- b60e                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0050 ---- 10a6                                 ld          R1, #pFwTaskExecuteScheduleTable
0051 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0052 ---- aa00                                 cmp         R2, #0
0053 ---- b60a                                 beq         /skip
0054 ---- a8ff                                 add         R2, #-1
0055 ---- af39                                 st          R2, [R1+R0]
0056 ---- be07                                 bnz         /skip

                                                   ; ... execute the task
0057 ---- 0cac                                     st          R0, [#fwCtrlInt/taskId]
0058 8600 88a8                                     add         R0, #pFwTaskExecuteFuncTable
005a ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
005b ---- fd47                                     nop
005c ---- 9db7                                     jsr         R0
005d ---- 08ac                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
005e ---- 8801                             add         R0, #1

005f ---- 8a01                         cmp         R0, #TASK_COUNT
0060 ---- beeb                         bneq        /loop

                                       ; Wait for the RTC CH2 event clearing to finish
0061 ---- 254f /waitOnRtcEvClr:        iobtst      #IOB_EVCTL_EVSTAT2L_AON_RTC_CH2, [#IOP_EVCTL_EVSTAT2L]
0062 ---- aefe                         biob1       /waitOnRtcEvClr

                                       ; Clear event edge detector
0063 ---- 645b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU0, [#IOP_SYSIF_WUFLAGSCLR]
0064 ---- 445b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU0, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; End clearing the RTC event
0065 ---- 4477                         iobclr      #0, [#IOP_SYSIF_RTCEVCLR]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0066 ---- 0487                         jmp         PowerDownSequence;




               Event0Vector:
                                       ; Disable and clear wake-up event
0067 ---- 5656                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU1CFG] ; Disable source
0068 ---- 655b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU1,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
0069 ---- 455b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU1,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
006a ---- 0000                         ld          R0, #0
006b ---- 0cac                         st          R0, [#fwCtrlInt/taskId]
006c ---- 0001                         ld          R0, #(1 << 0)
006d ---- 0cad                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
006e ---- 14d7                         jsr         i2cLightSensor/event0

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
006f ---- 0487                         jmp         PowerDownSequence;




               Event1Vector:
                                       ; Disable and clear wake-up event
0070 ---- 5657                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU2CFG] ; Disable source
0071 ---- 665b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU2,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
0072 ---- 465b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU2,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
0073 ---- 0000                         ld          R0, #0
0074 ---- 0cac                         st          R0, [#fwCtrlInt/taskId]
0075 ---- 0002                         ld          R0, #(1 << 1)
0076 ---- 0cad                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
0077 ---- 1416                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0078 ---- 0487                         jmp         PowerDownSequence;




               Event2Vector:
                                       ; Disable and clear wake-up event
0079 ---- 5658                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU3CFG] ; Disable source
007a ---- 675b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU3,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
007b ---- 475b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU3,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
007c ---- 0000                         ld          R0, #0
007d ---- 0cac                         st          R0, [#fwCtrlInt/taskId]
007e ---- 0004                         ld          R0, #(1 << 2)
007f ---- 0cad                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
0080 ---- 1416                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0081 ---- 0487                         jmp         PowerDownSequence;




               TaskAlertAckVector:
                                       ; Clear wake-up event
0082 ---- 765b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU2, [#IOP_SYSIF_WUFLAGSCLR]
0083 ---- 565b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU2, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
0084 86ff 03ff                         ld          R0, #0xFFFF
0086 ---- 0caf                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
                                       ; -> Fall through




               PowerDownSequence:
                                       ; Let wake-up events propagate to the AON domain
0087 ---- 645c                         iobset      #0, [#IOP_SYSIF_WUGATE]

                                       ; Do we have any ALERT-generating flags pending?
0088 ---- 78ae                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0089 ---- 68af                         ld          R6, [#fwCtrlInt/alertGenMask]
008a ---- ed37                         tst         R6, R7
008b ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
008c ---- 0000                             ld          R0, #0
008d ---- 0cae                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
008e ---- 7cb4                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
008f ---- 6540                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0090 ---- 0caf                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Set initial power mode for next executed vector
                                       ; -> Only at initialization

                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0091 ---- 78af                         ld          R7, [#fwCtrlInt/alertGenMask]
0092 ---- 68b0                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
0093 ---- fd0e                         or          R7, R6
0094 ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
0095 ---- e95a                         in          R6, [#IOP_SYSIF_WUFLAGS]
0096 ---- fd0e                         or          R7, R6
0097 ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request
0098 ---- 6553                             iobset      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0099 ---- bdb7 sleepInstr:             sleep




               PwrRequestAndWaitForActiveMode:
                                       ; Update Reference DAC clock divider before entering active mode
009a ---- 700b                         ld          R7, #((ACTIVE_MODE_SCE_CLK_FREQ_MHZ / 2) - 1)
009b ---- fb96                         out         R7, [#IOP_ANAIF_DACSMPLCFG0]

                                       ; Deassert the low-power request
009c ---- 4453                         iobclr      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
009d ---- 2454 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEACK]
009e ---- aefe                         biob1       /waitForOpmodeAck

                                       ; Done
009f ---- adb7                         rts




               PwrRequestAndWaitForLowPowerMode:
                                       ; Assert the low-power request
00a0 ---- 6453                         iobset      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
00a1 ---- 2454 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEACK]
00a2 ---- a6fe                         biob0       /waitForOpmodeAck

                                       ; Update Reference DAC clock divider after leaving active mode
00a3 ---- 7000                         ld          R7, #(1 - 1)
00a4 ---- fb96                         out         R7, [#IOP_ANAIF_DACSMPLCFG0]

                                       ; Done
00a5 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
00a6 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
00a7 ---- 00bc                         dw          #i2cLightSensor/initialize
               pFwTaskExecuteFuncTable:
00a8 ---- 00bf                         dw          #i2cLightSensor/execute
               pFwTaskTerminateFuncTable:
00a9 ---- 0102                         dw          #i2cLightSensor/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
00aa ---- 0000                         dw          #0x0000
               pRtlTaskLogMaskTable:
00ab ---- 0000                         dw          #0x0000


               ; Internal control data
               fwCtrlInt:
00ac ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
00ad ---- 0000 /bvActiveEvent:         dw          #0      ; Bit-vector indicating index of the currently active event trigger
00ae ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
00af ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
00b0 ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
00b1 ---- 0000 /progwucfgManTrigReg:   dw          #0x0000 ; Address of PROGWUnCFG register to be triggered manually by EventManTriggerVector
00b2 ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
00b3 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
00b4 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
00b5 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
00b6 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
00b7 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: I2C Light Sensor"
               i2cLightSensor/cfg:
               i2cLightSensor/cfg/highThreshold:
00b8 ---- ffff                         dw          #65535
               i2cLightSensor/cfg/lowThreshold:
00b9 ---- 0000                         dw          #0
               i2cLightSensor/input:
               i2cLightSensor/output:
               i2cLightSensor/output/value:
00ba ---- 0000                         dw          #0
               i2cLightSensor/state:
               i2cLightSensor/state/i2cStatus:
00bb ---- 0000                         dw          #0
               .segment end "Task: I2C Light Sensor"


               .segment begin "Task: I2C Light Sensor"
               i2cLightSensor/initialize:
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
00bc ---- 0001                         ld          R0, #1
00bd ---- 0ca6                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               i2cLightSensor/initializeDone:
00be ---- adb7                         rts




               i2cLightSensor/execute:
               ;? // Configure and start the next measurement
               ;? i2cDeviceWriteReg16MsbFirst(ALS_I2C_ADDR, ALS_REG_CFG, ALS_CFG_ONE_SHOT);
00bf ---- 5001                         ld          R5, #1
00c0 86c2 4210                         ld          R4, #-15856
00c2 ---- 68bb                         ld          R6, [#i2cLightSensor/state/i2cStatus]
00c3 ---- 70c7                         ld          R7, #/id0061
00c4 ---- 7d13                         st          R7, [#i2cDeviceCommonReturn]
00c5 ---- 7088                         ld          R7, #(136 | 0)
00c6 ---- 0514                         jmp         I2cDeviceWriteReg16MsbFirst
               /id0061:
00c7 ---- 0910                         ld          R0, [#i2cDeviceCommonBackupR0]
00c8 ---- 6cbb                         st          R6, [#i2cLightSensor/state/i2cStatus]
               ;?
               ;? // Read the result after ~100 milliseconds + a 20% margin
               ;? evhSetupTimer1Trigger(0, 120, 2);
00c9 ---- 0078                         ld          R0, #120
00ca ---- 8b82                         out         R0, [#IOP_TIMER01_T1TARGET]
00cb 8623 0322                         ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
00cd ---- 8b7e                         out         R0, [#IOP_TIMER01_T1CFG]
00ce ---- 0035                         ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER1_EV
00cf ---- 8b56                         out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
00d0 ---- 655b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
00d1 ---- 455b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
00d2 ---- 7656                         iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
00d3 ---- 6480                         iobset      #0, [#IOP_TIMER01_T1CTL]
               ;?
               ;? // Schedule the next execution
               ;? fwScheduleTask(1);
00d4 ---- 0001                         ld          R0, #1
00d5 ---- 0ca6                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               i2cLightSensor/executeDone:
00d6 ---- adb7                         rts




               i2cLightSensor/event0:
               ;? // If a measurement was successfully started during the last execution ...
               ;? if (state.i2cStatus == 0x0000) {
00d7 ---- 08bb                         ld          R0, [#i2cLightSensor/state/i2cStatus]
00d8 ---- 8a00                         cmp         R0, #0
00d9 ---- be23                         bneq        /id0074
               ;?
               ;?     // Select the result register
               ;?     U16 result;
               ;?     i2cDeviceReadReg16MsbFirst(ALS_I2C_ADDR, ALS_REG_RESULT; result);
00da ---- 5000                             ld          R5, #0
00db ---- 68bb                             ld          R6, [#i2cLightSensor/state/i2cStatus]
00dc ---- 70e0                             ld          R7, #/id0076
00dd ---- 7d13                             st          R7, [#i2cDeviceCommonReturn]
00de ---- 7088                             ld          R7, #(136 | 0)
00df ---- 0569                             jmp         I2cDeviceReadReg16MsbFirst
               /id0076:
00e0 ---- 0910                             ld          R0, [#i2cDeviceCommonBackupR0]
00e1 ---- 6cbb                             st          R6, [#i2cLightSensor/state/i2cStatus]
               ;?
               ;?     // If successful ...
               ;?     if (state.i2cStatus == 0x0000) {
00e2 ---- 08bb                             ld          R0, [#i2cLightSensor/state/i2cStatus]
00e3 ---- 8a00                             cmp         R0, #0
00e4 ---- be15                             bneq        /id0082
               ;?
               ;?         // Convert the result (4-bit exponent + 12-bit mantissa) into 16-bit fixed-point
               ;?         U16 exp = result >> 12;
00e5 ---- 8d47                                 ld          R0, R7
00e6 ---- 8da8                                 lsr         R0, #8
00e7 ---- 8dac                                 lsr         R0, #4
               ;?         U16 mant = result << 4;
00e8 ---- fda4                                 lsl         R7, #4
               ;?         // The exponent is in range 0 to 11
               ;?         U16 value = mant >> (11 - exp);
00e9 ---- 88f5                                 add         R0, #-11
00ea ---- 8d91                                 neg         R0
00eb ---- fd88                                 lsr         R7, R0
               ;?         output.value = value;
00ec ---- 7cba                                 st          R7, [#i2cLightSensor/output/value]
               ;?
               ;?         // Notify the application with the result is below the low threshold or above the high threshold
               ;?         if (value < cfg.lowThreshold) {
00ed ---- 08b9                                 ld          R0, [#i2cLightSensor/cfg/lowThreshold]
00ee ---- fd28                                 cmp         R7, R0
00ef ---- a603                                 bgeu        /id0090
               ;?             fwGenAlertInterrupt();
00f0 ---- 08ae                                     ld          R0, [#fwCtrlInt/bvTaskIoAlert]
00f1 ---- 8201                                     or          R0, #(1 << 0)
00f2 ---- 0cae                                     st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?         }
               /id0090:
               ;?         if (value > cfg.highThreshold) {
00f3 ---- 08b8                                 ld          R0, [#i2cLightSensor/cfg/highThreshold]
00f4 ---- fd28                                 cmp         R7, R0
00f5 ---- 9e03                                 bleu        /id0094
               ;?             fwGenAlertInterrupt();
00f6 ---- 08ae                                     ld          R0, [#fwCtrlInt/bvTaskIoAlert]
00f7 ---- 8201                                     or          R0, #(1 << 0)
00f8 ---- 0cae                                     st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?         }
               /id0094:
               ;?
               ;?     } else {
00f9 ---- 04fd                             jmp         /id0084
               /id0082:
               ;?         i2cStop();
00fa ---- 68bb                                 ld          R6, [#i2cLightSensor/state/i2cStatus]
00fb ---- 152e                                 jsr         I2cStop
00fc ---- 6cbb                                 st          R6, [#i2cLightSensor/state/i2cStatus]
               ;?     }
               /id0084:
               ;? }
               /id0074:
               ;?
               ;? // Run-time logging
               ;? rtlLogStructs(BV_RTL_LOG_OUTPUT);
00fd ---- 0004                         ld          R0, #4
00fe ---- 18ab                         ld          R1, [#(pRtlTaskLogMaskTable + 0)]
00ff ---- 8d01                         and         R0, R1
0100 ---- 0caa                         st          R0, [#(pRtlTaskLogReqTable + 0)]
               i2cLightSensor/event0Done:
0101 ---- adb7                         rts




               i2cLightSensor/terminate:
               ;? // Shut down the light sensor
               ;? i2cDeviceWriteReg16MsbFirst(ALS_I2C_ADDR, ALS_REG_CFG, ALS_CFG_RESET);
0102 ---- 5001                         ld          R5, #1
0103 86c8 4010                         ld          R4, #-14320
0105 ---- 68bb                         ld          R6, [#i2cLightSensor/state/i2cStatus]
0106 ---- 710a                         ld          R7, #/id0102
0107 ---- 7d13                         st          R7, [#i2cDeviceCommonReturn]
0108 ---- 7088                         ld          R7, #(136 | 0)
0109 ---- 0514                         jmp         I2cDeviceWriteReg16MsbFirst
               /id0102:
010a ---- 0910                         ld          R0, [#i2cDeviceCommonBackupR0]
010b ---- 6cbb                         st          R6, [#i2cLightSensor/state/i2cStatus]
               ;?
               ;? // Cancel the potentially active event trigger
               ;? evhCancelTrigger(0);
010c ---- 5656                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
010d ---- 655b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
010e ---- 455b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
               i2cLightSensor/terminateDone:
010f ---- adb7                         rts
               .segment end "Task: I2C Light Sensor"


               .segment begin "Procedure Library"
               ; Register backup
               i2cDeviceCommonBackupR0:
0110 ---- 0000                         dw          #0x0000
               i2cDeviceCommonBackupR5:
0111 ---- 0000                         dw          #0x0000
               i2cDeviceCommonBackupR7:
0112 ---- 0000                         dw          #0x0000

               ; Return address i2cDeviceXyz() procedures
               i2cDeviceCommonReturn:
0113 ---- 0000                         dw          #0x0000




               ; PARAMETERS:
               ;     R7 = I2C address
               ;     R6 = Status flags
               ;     R5 = Register address
               ;     R4 = Register value
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5, R7
               ;     R0 must be restored from i2cDeviceCommonBackupR0 after return
               I2cDeviceWriteReg16MsbFirst:
                                       ; Backup R0 (return) and R5 (register address)
0114 ---- 0d10                         st          R0, [#i2cDeviceCommonBackupR0]
0115 ---- 5d11                         st          R5, [#i2cDeviceCommonBackupR5]

                                       ; Start condition
0116 ---- 1529                         jsr         I2cStart

                                       ; Transmit the I2C address
0117 ---- 1539                         jsr         I2cTxByte

                                       ; Transmit the register address
0118 ---- 7911                         ld          R7, [#i2cDeviceCommonBackupR5]
0119 ---- 1539                         jsr         I2cTxByte

                                       ; Transmit MSB of the register value
011a ---- fd44                         ld          R7, R4
011b ---- fda8                         lsr         R7, #8
011c ---- 1539                         jsr         I2cTxByte

                                       ; Transmit LSB of the register value
011d ---- fd44                         ld          R7, R4
011e ---- f0ff                         and         R7, #0xFF
011f ---- 1539                         jsr         I2cTxByte

                                       ; Load the return address here to avoid pipeline hazard with "jmp R0"
0120 ---- 0913                         ld          R0, [#i2cDeviceCommonReturn]

                                       ; Stop condition
0121 ---- 152e                         jsr         I2cStop

                                       ; Done
0122 ---- 8db7                         jmp         R0




               ; CLOBBERS:
               ;     R5
               I2cRepeatedStart:
                                       ; Wait T_LOW (SDA is already pull-up)
0123 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0124 ---- 1557                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
0125 ---- 76bb                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
0126 ---- 155a                         jsr         I2cWaitSclStretch

                                       ; Wait T_SU_STA
0127 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0128 ---- 1557                         jsr         I2cWaitDelay
               I2cStart:
                                       ; SDA = driven low
0129 ---- 55bb                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_HD_STA
012a ---- 53f8                         ld          R5, #-((I2C_BASE_DELAY) - (1))
012b ---- 1557                         jsr         I2cWaitDelay

                                       ; SCL = driven low
012c ---- 56bb                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Done
012d ---- adb7                         rts




               ; CLOBBERS:
               ;     R5
               I2cStop:
                                       ; SDA = driven low
012e ---- 55bb                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_LOW
012f ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0130 ---- 1557                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
0131 ---- 76bb                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
0132 ---- 155a                         jsr         I2cWaitSclStretch

                                       ; Wait T_SU_STO
0133 ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
0134 ---- 1557                         jsr         I2cWaitDelay

                                       ; SDA = pull-up
0135 ---- 75bb                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_BUF
0136 ---- 53f5                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
0137 ---- 1557                         jsr         I2cWaitDelay

                                       ; Done
0138 ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = TX byte shift register
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = Updated TX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cTxByte:
                                       ; Bail out if an error has occurred
0139 ---- ea00                         cmp         R6, #0
013a ---- be1b                         bnz         /done


                                       ; Transmit each bit in the data byte ...
013b ---- b50e                         loop        #8, /byteLoopEnd

                                           ; Output the bit to SDA
013c ---- fda1                             lsl         R7, #1
013d 8601 fc00                             tst         R7, #0x0100
013f ---- b602                             bz          /dataSdaLow
0140 ---- 75bb /dataSdaHigh:                   iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0141 ---- 8e02                             bra         /dataSdaDone
0142 ---- 55bb /dataSdaLow:                    iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0143 ---- fd47                             nop
               /dataSdaDone:
                                           ; Wait T_LOW
0144 ---- 53fa                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (7))
0145 ---- 1557                             jsr         I2cWaitDelay

                                           ; SCL = pull-up
0146 ---- 76bb                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                           ; Wait for SCL stretching to end or time out
0147 ---- 155a                             jsr         I2cWaitSclStretch

                                           ; Wait T_HIGH
0148 ---- 53fd                             ld          R5, #-(I2C_BASE_DELAY - (I2C_WAIT_STRETCH_DELAY + 1))
0149 ---- 1557                             jsr         I2cWaitDelay

                                           ; SCL = driven low
014a ---- 56bb                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:

                                       ; Receive the ACK bit
                                       ; SDA = pull-up
014b ---- 75bb                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_LOW
014c ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
014d ---- 1557                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
014e ---- 76bb                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
014f ---- 155a                         jsr         I2cWaitSclStretch

                                       ; Wait T_HIGH
0150 ---- 53fa                         ld          R5, #-((I2C_BASE_DELAY) - (3))
0151 ---- 1557                         jsr         I2cWaitDelay

                                       ; Read and store the SDA value in the status word
0152 ---- 35bf                         iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
0153 ---- a601                         biob0       /ackSdaLow
0154 ---- e201                             or          R6, #0x01
               /ackSdaLow:
                                       ; SCL = driven low
0155 ---- 56bb                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]


               /done:                  ; Done
0156 ---- adb7                         rts




               ; PARAMETERS
               ;     R5 = Delay excluding the I2cWaitDelay() call, in instruction cycles
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitDelay:
                                       ; Wait for the specified number of cycles
0157 ---- d802 /waitLoop:                  add         R5, #2
0158 ---- defe                         bneg        /waitLoop

                                       ; Done
0159 ---- adb7                         rts




               ; PARAMETERS:
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitSclStretch:
                                       ; Load the timeout (up to 20 ms) loop counter = configured number of us
015a ---- 53f6                         ld          R5, #(-I2C_STRETCH_TIMEOUT_US)
               /waitLoop:
                                           ; If SCL is high, we're done
015b ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
015c ---- ae0b                             biob1       /done
                                           ; Unroll the loop to 12 instructions = 1 per loop for faster response
015d ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
015e ---- ae09                             biob1       /done
015f ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0160 ---- ae07                             biob1       /done
0161 ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0162 ---- ae05                             biob1       /done
0163 ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0164 ---- ae03                             biob1       /done

0165 ---- d801                         add         R5, #1;
0166 ---- bef4                         bnz         /waitLoop

               /timeout:               ; Timeout has occurred, so OR it into the flags and bail out
0167 ---- e202                         or          R6, #0x0002

               /done:                  ; Done
0168 ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = I2C address
               ;     R6 = Status flags
               ;     R5 = Register address
               ;
               ; RETURN VALUES:
               ;     R7 = Register value
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5, R7
               ;     R0 must be restored from i2cDeviceCommonBackupR0 after return
               I2cDeviceReadReg16MsbFirst:
                                       ; Backup R0 (return), R5 (register address) and R7 (I2C address)
0169 ---- 0d10                         st          R0, [#i2cDeviceCommonBackupR0]
016a ---- 5d11                         st          R5, [#i2cDeviceCommonBackupR5]
016b ---- 7d12                         st          R7, [#i2cDeviceCommonBackupR7]

                                       ; Start condition
016c ---- 1529                         jsr         I2cStart

                                       ; Transmit the I2C address
016d ---- 1539                         jsr         I2cTxByte

                                       ; Transmit the register address
016e ---- 7911                         ld          R7, [#i2cDeviceCommonBackupR5]
016f ---- 1539                         jsr         I2cTxByte

                                       ; If no error is indicated ...
0170 ---- ea00                         cmp         R6, #0x0000
0171 ---- be0b                         bneq        /skipRx

                                           ; Repeated start condition
0172 ---- 1523                             jsr         I2cRepeatedStart

                                           ; Transmit the I2C address + R
0173 ---- 7912                             ld          R7, [#i2cDeviceCommonBackupR7]
0174 ---- f201                             or          R7, #0x0001
0175 ---- 1539                             jsr         I2cTxByte

                                           ; Receive MSB of the register value (transmit ACK)
0176 ---- 7000                             ld          R7, #0x0000
0177 ---- 1580                             jsr         I2cRxByte
0178 ---- 8d47                             ld          R0, R7
0179 ---- 8da0                             lsl         R0, #8

                                           ; Receive the register value (transmit NAK)
017a ---- 7001                             ld          R7, #0x0001
017b ---- 1580                             jsr         I2cRxByte
017c ---- fd08                             or          R7, R0
               /skipRx:
                                       ; Load the return address here to avoid pipeline hazard with "jmp R0"
017d ---- 0913                         ld          R0, [#i2cDeviceCommonReturn]

                                       ; Stop condition
017e ---- 152e                         jsr         I2cStop

                                       ; Done
017f ---- 8db7                         jmp         R0




               ; PARAMETERS:
               ;     R7 = Acknowledgment bit value, 0x0000 to transmit ACK, 0x0001 to transmit NAK
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = RX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cRxByte:
                                       ; Bail out if an error has occurred
0180 ---- ea00                         cmp         R6, #0
0181 ---- be1c                         bnz         /done


                                       ; Receive each bit in the data byte ...
0182 ---- b50b                         loop        #8, /byteLoopEnd

                                           ; SDA = pull-up
0183 ---- 75bb                             iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                           ; Wait T_LOW
0184 ---- 53f5                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
0185 ---- 1557                             jsr         I2cWaitDelay

                                           ; SCL = pull-up
0186 ---- 76bb                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                           ; Wait for SCL stretching to end or time out
0187 ---- 155a                             jsr         I2cWaitSclStretch

                                           ; Wait T_HIGH
0188 ---- 53ff                             ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 3))
0189 ---- 1557                             jsr         I2cWaitDelay

                                           ; Read and store SDA
018a ---- fda1                             lsl         R7, #1
018b ---- 35bf                             iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
018c ---- a601                             biob0       /dataSdaLow
018d ---- f201                                 or          R7, #0x01
               /dataSdaLow:
                                           ; SCL = driven low
018e ---- 56bb                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:

                                       ; Transmit the ACK bit, which is now in bit 8 of the shift register
                                       ; Output the bit to SDA
018f 8601 fc00                         tst         R7, #0x0100
0191 ---- b602                         bz          /ackSdaLow
0192 ---- 75bb /ackSdaHigh:                iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0193 ---- 8e02                         bra         /ackSdaDone
0194 ---- 55bb /ackSdaLow:                 iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0195 ---- fd47                         nop
               /ackSdaDone:
                                       ; Wait T_LOW
0196 ---- 53f9                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (6))
0197 ---- 1557                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
0198 ---- 76bb                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
0199 ---- 155a                         jsr         I2cWaitSclStretch

                                       ; Wait T_HIGH
019a ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
019b ---- 1557                         jsr         I2cWaitDelay

                                       ; SCL = driven low
019c ---- 56bb                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Mask the ACK bit in the received data
019d ---- f0ff                         and         R7, #0xFF


               /done:                  ; Done
019e ---- adb7                         rts
               .segment end "Procedure Library"


; Generated by DESKTOP-MRBABVC at 2020-04-30 10:29:47.132
