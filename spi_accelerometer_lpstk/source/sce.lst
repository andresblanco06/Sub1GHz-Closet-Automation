               .deffile adi_defs__1.asm
               .deffile ddi_defs__1.asm
               .deffile reg_defs__1.asm
               .deffile sce_defs__1.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Sensor Controller clock frequency in active mode
               .define ACTIVE_MODE_SCE_CLK_FREQ_MHZ    24

               ; Resource-specified definitions, if any
               ; (None)


               .segment begin "Framework"


               VectorTable:
                                       ; SW 0
0000 ---- 140e                         jsr         PowerUp
0001 ---- 0417                         jmp         TaskCtrlReqVector
                                       ; SW 1
0002 ---- 140e                         jsr         PowerUp
0003 ---- 0440                         jmp         EventManTrigVector
                                       ; PROG 0
0004 ---- 140e                         jsr         PowerUp
0005 ---- 044a                         jmp         AonRtcCh2Vector
                                       ; PROG 1
0006 ---- 140e                         jsr         PowerUp
0007 ---- 0467                         jmp         Event0Vector
                                       ; PROG 2
0008 ---- 140e                         jsr         PowerUp
0009 ---- 0470                         jmp         Event1Vector
                                       ; PROG 3
000a ---- 140e                         jsr         PowerUp
000b ---- 0479                         jmp         Event2Vector
                                       ; SW 2
000c ---- 140e                         jsr         PowerUp
000d ---- 0482                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Make sure that the last operation mode request has taken effect
000e ---- 8953                         in          R0, [#IOP_SYSIF_OPMODEREQ]
000f ---- 9954 /waitForOpmodeSync:     in          R1, [#IOP_SYSIF_OPMODEACK]
0010 ---- 8d29                         cmp         R0, R1
0011 ---- befd                         bneq        /waitForOpmodeSync

                                       ; Deassert the power-down request
0012 ---- 4553                         iobclr      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
0013 ---- 2554 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEACK]
0014 ---- aefe                         biob1       /waitForOpmodeAck

                                       ; Prevent wake-up events from propagating to the AON domain
0015 ---- 445c                         iobclr      #0, [#IOP_SYSIF_WUGATE]

               FwEmptyFunc:            ; Done
0016 ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear wake-up event
0017 ---- 745b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU0, [#IOP_SYSIF_WUFLAGSCLR]
0018 ---- 545b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU0, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; For each task ...
0019 ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
001a ---- 7cac                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
001b ---- 68b5                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001c ---- 00a7                             ld          R0, #pFwTaskInitializeFuncTable
001d ---- 1439                             jsr         /handleReq

                                           ; Handle execute request, if any
001e ---- 68b6                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
001f ---- 00a8                             ld          R0, #pFwTaskExecuteFuncTable
0020 ---- 1439                             jsr         /handleReq

                                           ; Handle terminate request, if any
0021 ---- 68b7                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0022 ---- 00a9                             ld          R0, #pFwTaskTerminateFuncTable
0023 ---- 1439                             jsr         /handleReq

                                           ; Move on to the next task
0024 ---- 78ac                             ld          R7, [#fwCtrlInt/taskId]
0025 ---- f801                             add         R7, #1

0026 ---- fa01                         cmp         R7, #TASK_COUNT
0027 ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
0028 ---- 78b3                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
0029 ---- 68b5                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
002a ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
002b ---- 68b7                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
002c ---- ed92                         inv         R6
002d ---- fd06                         and         R7, R6
002e ---- 7cb3                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; Has the run-time logging application requested locked struct access?
002f ---- 78b2                         ld          R7, [#fwCtrlInt/rtlStructLockReq]
0030 ---- fa01                         cmp         R7, #1
0031 ---- be05                         bneq        /noRtlStructWriteReq

                                           ; Signalize that we're ready
0032 ---- 7002                             ld          R7, #2
0033 ---- 7cb2                             st          R7, [#fwCtrlInt/rtlStructLockReq]

               /waitRtlStructWriteLoop:    ; Wait until the run-time logging application is done
0034 ---- 78b2                             ld          R7, [#fwCtrlInt/rtlStructLockReq]
0035 ---- fa00                             cmp         R7, #0
0036 ---- befd                             bneq        /waitRtlStructWriteLoop
               /noRtlStructWriteReq:
                                       ; We're READY for another request
0037 ---- 6440                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0038 ---- 0487                         jmp         PowerDownSequence;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0039 ---- 78ac                         ld          R7, [#fwCtrlInt/taskId]
003a ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
003b ---- ed8f                         lsr         R6, R7
003c ---- ec01                         tst         R6, #0x0001
003d ---- be01                         bnz         /noSkip
003e ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
003f ---- 8db7                         jmp         R0




               EventManTrigVector:
                                       ; Clear wake-up event
0040 ---- 755b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU1, [#IOP_SYSIF_WUFLAGSCLR]
0041 ---- 555b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU1, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Reconfigure the programmable wake-up, and trigger it
0042 ---- 78b1                         ld          R7, [#fwCtrlInt/progwucfgManTrigReg]
0043 ---- 60bf                         ld          R6, #(BV_SYSIF_PROGWUCFG_POL | SYSIF_PROGWUCFG_SRC_NO_EVENT)
0044 ---- ef27                         out         R6, [R7]
0045 ---- e240                         or          R6, #BV_SYSIF_PROGWUCFG_EN
0046 ---- ef27                         out         R6, [R7]

                                       ; Indicate completion
0047 ---- 7000                         ld          R7, #0x0000
0048 ---- 7cb1                         st          R7, [#fwCtrlInt/progwucfgManTrigReg]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0049 ---- 0487                         jmp         PowerDownSequence;




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
004a ---- 6477                         iobset      #0, [#IOP_SYSIF_RTCEVCLR]

                                       ; For each task (R0 is the current task ID) ...
004b ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
004c ---- 18b3                             ld          R1, [#fwCtrlExt/bvActiveTasks]
004d ---- 9d88                             lsr         R1, R0
004e ---- 9c01                             tst         R1, #0x0001
004f ---- b60e                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0050 ---- 10a6                                 ld          R1, #pFwTaskExecuteScheduleTable
0051 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0052 ---- aa00                                 cmp         R2, #0
0053 ---- b60a                                 beq         /skip
0054 ---- a8ff                                 add         R2, #-1
0055 ---- af39                                 st          R2, [R1+R0]
0056 ---- be07                                 bnz         /skip

                                                   ; ... execute the task
0057 ---- 0cac                                     st          R0, [#fwCtrlInt/taskId]
0058 8600 88a8                                     add         R0, #pFwTaskExecuteFuncTable
005a ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
005b ---- fd47                                     nop
005c ---- 9db7                                     jsr         R0
005d ---- 08ac                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
005e ---- 8801                             add         R0, #1

005f ---- 8a01                         cmp         R0, #TASK_COUNT
0060 ---- beeb                         bneq        /loop

                                       ; Wait for the RTC CH2 event clearing to finish
0061 ---- 254f /waitOnRtcEvClr:        iobtst      #IOB_EVCTL_EVSTAT2L_AON_RTC_CH2, [#IOP_EVCTL_EVSTAT2L]
0062 ---- aefe                         biob1       /waitOnRtcEvClr

                                       ; Clear event edge detector
0063 ---- 645b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU0, [#IOP_SYSIF_WUFLAGSCLR]
0064 ---- 445b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU0, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; End clearing the RTC event
0065 ---- 4477                         iobclr      #0, [#IOP_SYSIF_RTCEVCLR]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0066 ---- 0487                         jmp         PowerDownSequence;




               Event0Vector:
                                       ; Disable and clear wake-up event
0067 ---- 5656                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU1CFG] ; Disable source
0068 ---- 655b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU1,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
0069 ---- 455b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU1,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
006a ---- 0000                         ld          R0, #0
006b ---- 0cac                         st          R0, [#fwCtrlInt/taskId]
006c ---- 0001                         ld          R0, #(1 << 0)
006d ---- 0cad                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
006e ---- 151d                         jsr         spiAccelerometer/event0

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
006f ---- 0487                         jmp         PowerDownSequence;




               Event1Vector:
                                       ; Disable and clear wake-up event
0070 ---- 5657                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU2CFG] ; Disable source
0071 ---- 665b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU2,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
0072 ---- 465b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU2,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
0073 ---- 0000                         ld          R0, #0
0074 ---- 0cac                         st          R0, [#fwCtrlInt/taskId]
0075 ---- 0002                         ld          R0, #(1 << 1)
0076 ---- 0cad                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
0077 ---- 159f                         jsr         spiAccelerometer/event1

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0078 ---- 0487                         jmp         PowerDownSequence;




               Event2Vector:
                                       ; Disable and clear wake-up event
0079 ---- 5658                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU3CFG] ; Disable source
007a ---- 675b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU3,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
007b ---- 475b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU3,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
007c ---- 0000                         ld          R0, #0
007d ---- 0cac                         st          R0, [#fwCtrlInt/taskId]
007e ---- 0004                         ld          R0, #(1 << 2)
007f ---- 0cad                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
0080 ---- 1416                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0081 ---- 0487                         jmp         PowerDownSequence;




               TaskAlertAckVector:
                                       ; Clear wake-up event
0082 ---- 765b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU2, [#IOP_SYSIF_WUFLAGSCLR]
0083 ---- 565b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU2, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
0084 86ff 03ff                         ld          R0, #0xFFFF
0086 ---- 0caf                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
                                       ; -> Fall through




               PowerDownSequence:
                                       ; Let wake-up events propagate to the AON domain
0087 ---- 645c                         iobset      #0, [#IOP_SYSIF_WUGATE]

                                       ; Do we have any ALERT-generating flags pending?
0088 ---- 78ae                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0089 ---- 68af                         ld          R6, [#fwCtrlInt/alertGenMask]
008a ---- ed37                         tst         R6, R7
008b ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
008c ---- 0000                             ld          R0, #0
008d ---- 0cae                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
008e ---- 7cb4                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
008f ---- 6540                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0090 ---- 0caf                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Set initial power mode for next executed vector
                                       ; -> Only at initialization

                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0091 ---- 78af                         ld          R7, [#fwCtrlInt/alertGenMask]
0092 ---- 68b0                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
0093 ---- fd0e                         or          R7, R6
0094 ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
0095 ---- e95a                         in          R6, [#IOP_SYSIF_WUFLAGS]
0096 ---- fd0e                         or          R7, R6
0097 ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request
0098 ---- 6553                             iobset      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0099 ---- bdb7 sleepInstr:             sleep




               PwrRequestAndWaitForActiveMode:
                                       ; Update Reference DAC clock divider before entering active mode
009a ---- 700b                         ld          R7, #((ACTIVE_MODE_SCE_CLK_FREQ_MHZ / 2) - 1)
009b ---- fb96                         out         R7, [#IOP_ANAIF_DACSMPLCFG0]

                                       ; Deassert the low-power request
009c ---- 4453                         iobclr      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
009d ---- 2454 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEACK]
009e ---- aefe                         biob1       /waitForOpmodeAck

                                       ; Done
009f ---- adb7                         rts




               PwrRequestAndWaitForLowPowerMode:
                                       ; Assert the low-power request
00a0 ---- 6453                         iobset      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
00a1 ---- 2454 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEACK]
00a2 ---- a6fe                         biob0       /waitForOpmodeAck

                                       ; Update Reference DAC clock divider after leaving active mode
00a3 ---- 7000                         ld          R7, #(1 - 1)
00a4 ---- fb96                         out         R7, [#IOP_ANAIF_DACSMPLCFG0]

                                       ; Done
00a5 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
00a6 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
00a7 ---- 00db                         dw          #spiAccelerometer/initialize
               pFwTaskExecuteFuncTable:
00a8 ---- 011c                         dw          #spiAccelerometer/execute
               pFwTaskTerminateFuncTable:
00a9 ---- 01ac                         dw          #spiAccelerometer/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
00aa ---- 0000                         dw          #0x0000
               pRtlTaskLogMaskTable:
00ab ---- 0000                         dw          #0x0000


               ; Internal control data
               fwCtrlInt:
00ac ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
00ad ---- 0000 /bvActiveEvent:         dw          #0      ; Bit-vector indicating index of the currently active event trigger
00ae ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
00af ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
00b0 ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
00b1 ---- 0000 /progwucfgManTrigReg:   dw          #0x0000 ; Address of PROGWUnCFG register to be triggered manually by EventManTriggerVector
00b2 ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
00b3 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
00b4 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
00b5 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
00b6 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
00b7 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: SPI Accelerometer"
               spiAccelerometer/cfg:
               spiAccelerometer/input:
               spiAccelerometer/output:
               spiAccelerometer/output/accelError:
00b8 ---- 0000                         dw          #0
               spiAccelerometer/output/x:
00b9 ---- 0000                         dw          #0
               spiAccelerometer/output/xFiltered:
00ba ---- 0000                         dw          #0
               spiAccelerometer/output/xTiltDet:
00bb ---- 0000                         dw          #0
               spiAccelerometer/output/y:
00bc ---- 0000                         dw          #0
               spiAccelerometer/output/yFiltered:
00bd ---- 0000                         dw          #0
               spiAccelerometer/output/yTiltDet:
00be ---- 0000                         dw          #0
               spiAccelerometer/output/z:
00bf ---- 0000                         dw          #0
               spiAccelerometer/output/zFiltered:
00c0 ---- 0000                         dw          #0
               spiAccelerometer/state:
               spiAccelerometer/state/initIgnoreSmpl:
00c1 ---- 000c                         dw          #12
               spiAccelerometer/state/pXWindow:
00c2 ---- 0000                         dw          #0
00c3 ---- 0000                         dw          #0
00c4 ---- 0000                         dw          #0
00c5 ---- 0000                         dw          #0
00c6 ---- 0000                         dw          #0
00c7 ---- 0000                         dw          #0
00c8 ---- 0000                         dw          #0
00c9 ---- 0000                         dw          #0
               spiAccelerometer/state/pYWindow:
00ca ---- 0000                         dw          #0
00cb ---- 0000                         dw          #0
00cc ---- 0000                         dw          #0
00cd ---- 0000                         dw          #0
00ce ---- 0000                         dw          #0
00cf ---- 0000                         dw          #0
00d0 ---- 0000                         dw          #0
00d1 ---- 0000                         dw          #0
               spiAccelerometer/state/pZWindow:
00d2 ---- 0000                         dw          #0
00d3 ---- 0000                         dw          #0
00d4 ---- 0000                         dw          #0
00d5 ---- 0000                         dw          #0
00d6 ---- 0000                         dw          #0
00d7 ---- 0000                         dw          #0
00d8 ---- 0000                         dw          #0
00d9 ---- 0000                         dw          #0
               spiAccelerometer/state/windowPos:
00da ---- 0000                         dw          #0
               .segment end "Task: SPI Accelerometer"


               .segment begin "Task: SPI Accelerometer"
               spiAccelerometer/initialize:
               ;? macro spiWriteReg(addr, value) {
               ;?     spiBegin(AUXIO_SPI_CSN_ACCEL);
               ;?     spiTx8bit(ACCEL_SPI_WRITE);
               ;?     spiTx8bit(addr);
               ;?     spiTx8bit(value);
               ;?     spiEnd(AUXIO_SPI_CSN_ACCEL);
               ;? }
               ;?
               ;? // Configure the SPI peripheral
               ;? spiCfg(SPI_POL0_PHA0, 1);
00db ---- 0000                         ld          R0, #(((1 - 1) << IOB_SPIM_SPIMCFG_DIV) | 0)
00dc ---- 8b00                         out         R0, [#IOP_SPIM_SPIMCFG]
               ;?
               ;? // Perform soft reset, then wait 100 ms
               ;? spiWriteReg(ACCEL_REG_SOFT_RESET, ACCEL_SR_KEY);
               ;? >   spiBegin(AUXIO_SPI_CSN_ACCEL);
00dd ---- 66b3                         iobset      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
00de ---- 57ba                         iobclr      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? >   spiTx8bit(ACCEL_SPI_WRITE);
00df ---- 000a                         ld          R0, #10
00e0 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiTx8bit(addr);
00e1 ---- 001f                         ld          R0, #31
00e2 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiTx8bit(value);
00e3 ---- 0052                         ld          R0, #82
00e4 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiEnd(AUXIO_SPI_CSN_ACCEL);
               /id0178:
00e5 ---- 2408                         iobtst      #0, [#IOP_SPIM_DATAIDLE]
00e6 ---- a6fe                         biob0       /id0178
00e7 ---- 46b3                         iobclr      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
00e8 ---- 77ba                         iobset      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? fwDelayUs(50000);
00e9 86c3 0350                         ld          R0, #-15536
00eb ---- 8801                         add         R0, #1
00ec ---- 8b49                         out         R0, [#IOP_EVCTL_PROGDLY]
00ed ---- 8db1                         wev1        #WEVSEL_PROG_DLY
               ;? fwDelayUs(50000);
00ee 86c3 0350                         ld          R0, #-15536
00f0 ---- 8801                         add         R0, #1
00f1 ---- 8b49                         out         R0, [#IOP_EVCTL_PROGDLY]
00f2 ---- 8db1                         wev1        #WEVSEL_PROG_DLY
               ;?
               ;? // Perform one-time configuration of the ADXL362 accelerometer
               ;? spiWriteReg(ACCEL_REG_INTMAP1, ACCEL_IM_DATA_READY);
               ;? >   spiBegin(AUXIO_SPI_CSN_ACCEL);
00f3 ---- 66b3                         iobset      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
00f4 ---- 57ba                         iobclr      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? >   spiTx8bit(ACCEL_SPI_WRITE);
00f5 ---- 000a                         ld          R0, #10
00f6 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiTx8bit(addr);
00f7 ---- 002a                         ld          R0, #42
00f8 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiTx8bit(value);
00f9 ---- 0001                         ld          R0, #1
00fa ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiEnd(AUXIO_SPI_CSN_ACCEL);
               /id0184:
00fb ---- 2408                         iobtst      #0, [#IOP_SPIM_DATAIDLE]
00fc ---- a6fe                         biob0       /id0184
00fd ---- 46b3                         iobclr      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
00fe ---- 77ba                         iobset      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? spiWriteReg(ACCEL_REG_POWER_CTL, ACCEL_PC_LOW_NOISE_0 | ACCEL_PC_MEASURE_ON);
               ;? >   spiBegin(AUXIO_SPI_CSN_ACCEL);
00ff ---- 66b3                         iobset      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
0100 ---- 57ba                         iobclr      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? >   spiTx8bit(ACCEL_SPI_WRITE);
0101 ---- 000a                         ld          R0, #10
0102 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiTx8bit(addr);
0103 ---- 002d                         ld          R0, #45
0104 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiTx8bit(value);
0105 ---- 0002                         ld          R0, #2
0106 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiEnd(AUXIO_SPI_CSN_ACCEL);
               /id0188:
0107 ---- 2408                         iobtst      #0, [#IOP_SPIM_DATAIDLE]
0108 ---- a6fe                         biob0       /id0188
0109 ---- 46b3                         iobclr      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
010a ---- 77ba                         iobset      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;?
               ;? // Detect accelerometer failure (no interrupt occurred for 20 ms (expected interval is 10 ms)
               ;? evhSetupTimer1Trigger(1, 20, 2);
010b ---- 0014                         ld          R0, #20
010c ---- 8b82                         out         R0, [#IOP_TIMER01_T1TARGET]
010d 8623 0322                         ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
010f ---- 8b7e                         out         R0, [#IOP_TIMER01_T1CFG]
0110 ---- 0035                         ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER1_EV
0111 ---- 8b57                         out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
0112 ---- 665b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
0113 ---- 465b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
0114 ---- 7657                         iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
0115 ---- 6480                         iobset      #0, [#IOP_TIMER01_T1CTL]
               ;?
               ;? // Wake up on accelerometer interrupt
               ;? evhSetupGpioTrigger(0, AUXIO_I_ACCEL_IRQ, 1, EVH_GPIO_TRIG_ON_MATCH);
0116 ---- 0013                         ld          R0, #((19 + SYSIF_PROGWUCFG_SRC_AUXIO0) |((1 == 0) << IOB_SYSIF_PROGWUCFG_POL))
0117 ---- 8b56                         out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
0118 ---- 655b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0119 ---- 455b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
011a ---- 7656                         iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
               spiAccelerometer/initializeDone:
011b ---- adb7                         rts




               spiAccelerometer/execute:
               ;?
               spiAccelerometer/executeDone:
011c ---- adb7                         rts




               spiAccelerometer/event0:
               ;? // MACRO: Reads the current X, Y or Z value over SPI, and:
               ;? // - Stores it in the output data structure, for debug/logging purposes
               ;? // - Inserts it into the sample window, for filtering and further processing
               ;? macro spiRxAccelSample(axis, pAxisWindow, n) {
               ;?     U16 value;
               ;?     spiRx16bit(value);
               ;?     utilSwapEndianess(value; value);
               ;?     output.axis = value;
               ;?     state.pAxisWindow[n] = value;
               ;? }
               ;?
               ;? // MACRO: Calculates the sum of the specified sample window
               ;? macro getXyzWindowSum(pAxisWindow, axisFiltered) {
               ;?     S16 sum = 0;
               ;?     for (U16 n = 0; n < XYZ_WINDOW_SIZE; n++) {
               ;?         sum += pAxisWindow[n];
               ;?     }
               ;?     axisFiltered = sum;
               ;? }
               ;?
               ;?
               ;? // Read the accelerometer X, Y and Z values
               ;? U16 n = state.windowPos;
011d ---- 08da                         ld          R0, [#spiAccelerometer/state/windowPos]
               ;? spiBegin(AUXIO_SPI_CSN_ACCEL);
011e ---- 66b3                         iobset      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
011f ---- 57ba                         iobclr      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? spiTx8bit(ACCEL_SPI_READ);
0120 ---- 100b                         ld          R1, #11
0121 ---- 9b03                         out         R1, [#IOP_SPIM_TX8]
               ;? spiTx8bit(ACCEL_REG_XDATAL);
0122 ---- 100e                         ld          R1, #14
0123 ---- 9b03                         out         R1, [#IOP_SPIM_TX8]
               ;? spiRxAccelSample(x, pXWindow, n);
               ;? >   U16 value;
               ;? >   spiRx16bit(value);
0124 ---- 4404                         iobclr      #0, [#IOP_SPIM_TX16]
0125 ---- 9906                         in          R1, [#IOP_SPIM_RX16]
               ;? >   utilSwapEndianess(value; value);
0126 ---- ad41                         ld          R2, R1
0127 ---- 9d42                         ld          R1, R2
0128 ---- ada0                         lsl         R2, #8
0129 ---- 9da8                         lsr         R1, #8
012a ---- 9d0a                         or          R1, R2
               ;? >   output.axis = value;
012b ---- 1cb9                         st          R1, [#spiAccelerometer/output/x]
               ;? >   state.pAxisWindow[n] = value;
012c ---- 20c2                         ld          R2, #(spiAccelerometer/state/pXWindow + 0)
012d ---- 9f3a                         st          R1, [R2+R0]
               ;? spiRxAccelSample(y, pYWindow, n);
               ;? >   U16 value;
               ;? >   spiRx16bit(value);
012e ---- 4404                         iobclr      #0, [#IOP_SPIM_TX16]
012f ---- 9906                         in          R1, [#IOP_SPIM_RX16]
               ;? >   utilSwapEndianess(value; value);
0130 ---- ad41                         ld          R2, R1
0131 ---- 9d42                         ld          R1, R2
0132 ---- ada0                         lsl         R2, #8
0133 ---- 9da8                         lsr         R1, #8
0134 ---- 9d0a                         or          R1, R2
               ;? >   output.axis = value;
0135 ---- 1cbc                         st          R1, [#spiAccelerometer/output/y]
               ;? >   state.pAxisWindow[n] = value;
0136 ---- 20ca                         ld          R2, #(spiAccelerometer/state/pYWindow + 0)
0137 ---- 9f3a                         st          R1, [R2+R0]
               ;? spiRxAccelSample(z, pZWindow, n);
               ;? >   U16 value;
               ;? >   spiRx16bit(value);
0138 ---- 4404                         iobclr      #0, [#IOP_SPIM_TX16]
0139 ---- 9906                         in          R1, [#IOP_SPIM_RX16]
               ;? >   utilSwapEndianess(value; value);
013a ---- ad41                         ld          R2, R1
013b ---- 9d42                         ld          R1, R2
013c ---- ada0                         lsl         R2, #8
013d ---- 9da8                         lsr         R1, #8
013e ---- 9d0a                         or          R1, R2
               ;? >   output.axis = value;
013f ---- 1cbf                         st          R1, [#spiAccelerometer/output/z]
               ;? >   state.pAxisWindow[n] = value;
0140 ---- 20d2                         ld          R2, #(spiAccelerometer/state/pZWindow + 0)
0141 ---- 9f3a                         st          R1, [R2+R0]
               ;? spiEnd(AUXIO_SPI_CSN_ACCEL);
               /id0228:
0142 ---- 2408                         iobtst      #0, [#IOP_SPIM_DATAIDLE]
0143 ---- a6fe                         biob0       /id0228
0144 ---- 46b3                         iobclr      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
0145 ---- 77ba                         iobset      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? utilIncrAndWrap(n, XYZ_WINDOW_SIZE; state.windowPos);
0146 ---- 8801                         add         R0, #1
0147 ---- 8a08                         cmp         R0, #8
0148 ---- be01                         bneq        /id0229
0149 ---- 0000                         ld          R0, #0
               /id0229:
014a ---- 0cda                         st          R0, [#spiAccelerometer/state/windowPos]
               ;?
               ;? // Filter the X, Y and Z values. The filtered value is the sum of all samples in the
               ;? // window. The window size is XYZ_WINDOW_SIZE.
               ;? getXyzWindowSum(state.pXWindow, output.xFiltered);
               ;? >   S16 sum = 0;
014b ---- 1000                         ld          R1, #0
               ;? >   for (U16 n = 0; n < XYZ_WINDOW_SIZE; n++) {
014c ---- 0000                         ld          R0, #0
               /id0237:
               ;? >       sum += pAxisWindow[n];
014d ---- 20c2                             ld          R2, #(spiAccelerometer/state/pXWindow + 0)
014e ---- af1a                             ld          R2, [R2+R0]
014f ---- 9d22                             add         R1, R2
               ;? >   }
0150 ---- 8801                         add         R0, #1
0151 ---- 8a08                         cmp         R0, #8
0152 ---- aefa                         bltu        /id0237
               ;? >   axisFiltered = sum;
0153 ---- 1cba                         st          R1, [#spiAccelerometer/output/xFiltered]
               ;? getXyzWindowSum(state.pYWindow, output.yFiltered);
               ;? >   S16 sum = 0;
0154 ---- 1000                         ld          R1, #0
               ;? >   for (U16 n = 0; n < XYZ_WINDOW_SIZE; n++) {
0155 ---- 0000                         ld          R0, #0
               /id0244:
               ;? >       sum += pAxisWindow[n];
0156 ---- 20ca                             ld          R2, #(spiAccelerometer/state/pYWindow + 0)
0157 ---- af1a                             ld          R2, [R2+R0]
0158 ---- 9d22                             add         R1, R2
               ;? >   }
0159 ---- 8801                         add         R0, #1
015a ---- 8a08                         cmp         R0, #8
015b ---- aefa                         bltu        /id0244
               ;? >   axisFiltered = sum;
015c ---- 1cbd                         st          R1, [#spiAccelerometer/output/yFiltered]
               ;? getXyzWindowSum(state.pZWindow, output.zFiltered);
               ;? >   S16 sum = 0;
015d ---- 1000                         ld          R1, #0
               ;? >   for (U16 n = 0; n < XYZ_WINDOW_SIZE; n++) {
015e ---- 0000                         ld          R0, #0
               /id0251:
               ;? >       sum += pAxisWindow[n];
015f ---- 20d2                             ld          R2, #(spiAccelerometer/state/pZWindow + 0)
0160 ---- af1a                             ld          R2, [R2+R0]
0161 ---- 9d22                             add         R1, R2
               ;? >   }
0162 ---- 8801                         add         R0, #1
0163 ---- 8a08                         cmp         R0, #8
0164 ---- aefa                         bltu        /id0251
               ;? >   axisFiltered = sum;
0165 ---- 1cc0                         st          R1, [#spiAccelerometer/output/zFiltered]
               ;?
               ;? // At startup:
               ;? // - First ignore the initial samples from the accelerometer
               ;? // - Then fill up the sample window before using the filtered value
               ;? if (state.initIgnoreSmpl > 0) {
0166 ---- 08c1                         ld          R0, [#spiAccelerometer/state/initIgnoreSmpl]
0167 ---- 8a00                         cmp         R0, #0
0168 ---- 9e04                         bleu        /id0253
               ;?     state.initIgnoreSmpl -= 1;
0169 ---- 08c1                             ld          R0, [#spiAccelerometer/state/initIgnoreSmpl]
016a ---- 88ff                             add         R0, #-1
016b ---- 0cc1                             st          R0, [#spiAccelerometer/state/initIgnoreSmpl]
               ;?
               ;? // Normal operation:
               ;? } else {
016c ---- 058e                         jmp         /id0255
               /id0253:
               ;?
               ;?     // Detect tilting by more than 45 degrees in X direction
               ;?     U16 xFilteredAbs = @(output.xFiltered);
016d ---- 08ba                             ld          R0, [#spiAccelerometer/output/xFiltered]
016e ---- 8d90                             abs         R0
               ;?     U16 zFilteredAbs = @(output.zFiltered);
016f ---- 18c0                             ld          R1, [#spiAccelerometer/output/zFiltered]
0170 ---- 9d90                             abs         R1
               ;?     U16 xTiltDet = 0;
0171 ---- 2000                             ld          R2, #0
               ;?     if (xFilteredAbs > zFilteredAbs) {
0172 ---- 8d29                             cmp         R0, R1
0173 ---- 9e01                             bleu        /id0261
               ;?         xTiltDet = 1;
0174 ---- 2001                                 ld          R2, #1
               ;?     }
               /id0261:
               ;?
               ;?     // Detect tilting by more than 45 degrees in Y direction
               ;?     U16 yFilteredAbs = @(output.yFiltered);
0175 ---- 08bd                             ld          R0, [#spiAccelerometer/output/yFiltered]
0176 ---- 8d90                             abs         R0
               ;?     U16 yTiltDet = 0;
0177 ---- 3000                             ld          R3, #0
               ;?     if (yFilteredAbs > zFilteredAbs) {
0178 ---- 8d29                             cmp         R0, R1
0179 ---- 9e01                             bleu        /id0267
               ;?         yTiltDet = 1;
017a ---- 3001                                 ld          R3, #1
               ;?     }
               /id0267:
               ;?
               ;?     // Generate ALERT interrupt if tilt detection has changed
               ;?     if (xTiltDet != output.xTiltDet) {
017b ---- 08bb                             ld          R0, [#spiAccelerometer/output/xTiltDet]
017c ---- ad28                             cmp         R2, R0
017d ---- b604                             beq         /id0271
               ;?         fwGenAlertInterrupt();
017e ---- 08ae                                 ld          R0, [#fwCtrlInt/bvTaskIoAlert]
017f ---- 8201                                 or          R0, #(1 << 0)
0180 ---- 0cae                                 st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?     } else if (yTiltDet != output.yTiltDet) {
0181 ---- 0588                             jmp         /id0274
               /id0271:
0182 ---- 08be                             ld          R0, [#spiAccelerometer/output/yTiltDet]
0183 ---- bd28                             cmp         R3, R0
0184 ---- b603                             beq         /id0276
               ;?         fwGenAlertInterrupt();
0185 ---- 08ae                                 ld          R0, [#fwCtrlInt/bvTaskIoAlert]
0186 ---- 8201                                 or          R0, #(1 << 0)
0187 ---- 0cae                                 st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?     }
               /id0276:
               /id0274:
               ;?     output.xTiltDet = xTiltDet;
0188 ---- 2cbb                             st          R2, [#spiAccelerometer/output/xTiltDet]
               ;?     output.yTiltDet = yTiltDet;
0189 ---- 3cbe                             st          R3, [#spiAccelerometer/output/yTiltDet]
               ;?
               ;?     // Run-time logging
               ;?     rtlLogStructs(BV_RTL_LOG_OUTPUT);
018a ---- 0004                             ld          R0, #4
018b ---- 18ab                             ld          R1, [#(pRtlTaskLogMaskTable + 0)]
018c ---- 8d01                             and         R0, R1
018d ---- 0caa                             st          R0, [#(pRtlTaskLogReqTable + 0)]
               ;? }
               /id0255:
               ;?
               ;? // Detect accelerometer failure (no interrupt occurred for 20 ms (expected interval is 10 ms)
               ;? evhSetupTimer1Trigger(1, 20, 2);
018e ---- 0014                         ld          R0, #20
018f ---- 8b82                         out         R0, [#IOP_TIMER01_T1TARGET]
0190 8623 0322                         ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
0192 ---- 8b7e                         out         R0, [#IOP_TIMER01_T1CFG]
0193 ---- 0035                         ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER1_EV
0194 ---- 8b57                         out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
0195 ---- 665b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
0196 ---- 465b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
0197 ---- 7657                         iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
0198 ---- 6480                         iobset      #0, [#IOP_TIMER01_T1CTL]
               ;?
               ;? // Wake up again on the next accelerometer interrupt
               ;? evhSetupGpioTrigger(0, AUXIO_I_ACCEL_IRQ, 1, EVH_GPIO_TRIG_ON_MATCH);
0199 ---- 0013                         ld          R0, #((19 + SYSIF_PROGWUCFG_SRC_AUXIO0) |((1 == 0) << IOB_SYSIF_PROGWUCFG_POL))
019a ---- 8b56                         out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
019b ---- 655b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
019c ---- 455b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
019d ---- 7656                         iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
               spiAccelerometer/event0Done:
019e ---- adb7                         rts




               spiAccelerometer/event1:
               ;? // Stop handling the accelerometer interrupt
               ;? evhCancelTrigger(0);
019f ---- 5656                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
01a0 ---- 655b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
01a1 ---- 455b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
               ;?
               ;? // Indicate error
               ;? output.accelError = 1;
01a2 ---- 0001                         ld          R0, #1
01a3 ---- 0cb8                         st          R0, [#spiAccelerometer/output/accelError]
               ;? fwGenAlertInterrupt();
01a4 ---- 08ae                         ld          R0, [#fwCtrlInt/bvTaskIoAlert]
01a5 ---- 8201                         or          R0, #(1 << 0)
01a6 ---- 0cae                         st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?
               ;? // Run-time logging
               ;? rtlLogStructs(BV_RTL_LOG_OUTPUT);
01a7 ---- 0004                         ld          R0, #4
01a8 ---- 18ab                         ld          R1, [#(pRtlTaskLogMaskTable + 0)]
01a9 ---- 8d01                         and         R0, R1
01aa ---- 0caa                         st          R0, [#(pRtlTaskLogReqTable + 0)]
               spiAccelerometer/event1Done:
01ab ---- adb7                         rts




               spiAccelerometer/terminate:
               ;? macro spiWriteReg(addr, value) {
               ;?     spiBegin(AUXIO_SPI_CSN_ACCEL);
               ;?     spiTx8bit(ACCEL_SPI_WRITE);
               ;?     spiTx8bit(addr);
               ;?     spiTx8bit(value);
               ;?     spiEnd(AUXIO_SPI_CSN_ACCEL);
               ;? }
               ;?
               ;? // Stop the event handler code triggers
               ;? evhCancelTrigger(0);
01ac ---- 5656                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
01ad ---- 655b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
01ae ---- 455b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
               ;? evhCancelTrigger(1);
01af ---- 5657                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
01b0 ---- 665b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
01b1 ---- 465b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
               ;?
               ;? // Disable the accelerometer
               ;? spiWriteReg(ACCEL_REG_POWER_CTL, ACCEL_PC_MEASURE_OFF);
               ;? >   spiBegin(AUXIO_SPI_CSN_ACCEL);
01b2 ---- 66b3                         iobset      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
01b3 ---- 57ba                         iobclr      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? >   spiTx8bit(ACCEL_SPI_WRITE);
01b4 ---- 000a                         ld          R0, #10
01b5 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiTx8bit(addr);
01b6 ---- 002d                         ld          R0, #45
01b7 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiTx8bit(value);
01b8 ---- 0000                         ld          R0, #0
01b9 ---- 8b03                         out         R0, [#IOP_SPIM_TX8]
               ;? >   spiEnd(AUXIO_SPI_CSN_ACCEL);
               /id0294:
01ba ---- 2408                         iobtst      #0, [#IOP_SPIM_DATAIDLE]
01bb ---- a6fe                         biob0       /id0294
01bc ---- 46b3                         iobclr      #(10 & 0x07), [#(IOP_AIODIO0_GPIODIE + (10 >> 3))]
01bd ---- 77ba                         iobset      #(7 & 0x07), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               spiAccelerometer/terminateDone:
01be ---- adb7                         rts
               .segment end "Task: SPI Accelerometer"


               .segment begin "Procedure Library"
               ; No library functions used
               .segment end "Procedure Library"


; Generated by DESKTOP-MRBABVC at 2020-05-02 00:02:56.655
