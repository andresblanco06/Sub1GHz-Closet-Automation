<?xml version="1.0" encoding="UTF-8"?>
<project name="SPI Accelerometer for LPSTK" version="2.6.0.0">
    <desc><![CDATA[Demonstrates low-power sampling of an SPI accelerometer (ADXL362) on the LaunchPad SensorTag Kit (LPSTK), with simple processing.

The accelerometer samples autonomously at 100 Hz, and generates interrupt to the Sensor Controller.
The Sensor Controller reads the accelerometer and performs simple filtering and tilt detection.

The default sampling frequency is 100 Hz (configured accelermeter samping frequency).

Tilt detection is communicated to the System CPU application, which enables an LED on the LPSTK when tilt is detected for each axis.

Task Testing should only be used for debugging purposes, as it will not run the SPI Accelerometer task at the correct rate. Use Run-Time Logging for testing, performance evaluation and tuning.

The accelerometer orientation is printed on the board.

BOARD SETUP (requires a LaunchPad, for example LAUNCHXL-CC1352R1):
- Remove all 11 jumpers on the pin row between the XDS110 and the device on the LaunchPad.
- Use the supplied cables to connect JTAG and UART from the LPSTK board to the LaunchPad.

See the header in the application source file ("main_tirtos.c") for further details and instructions. This file is located in the source code output directory.]]></desc>
    <pattr name="Apply default power mode">0</pattr>
    <pattr name="Board">CC1352R LaunchPad SensorTag Kit (LPSTK)</pattr>
    <pattr name="Chip name">CC1352R1F3</pattr>
    <pattr name="Chip package">QFN48 7x7 RGZ</pattr>
    <pattr name="Chip revision">E</pattr>
    <pattr name="Clock in active mode">0</pattr>
    <pattr name="Code prefix"></pattr>
    <pattr name="Default power mode">1</pattr>
    <pattr name="Operating system">TI-RTOS</pattr>
    <pattr name="Output directory">./source</pattr>
    <pattr name="RTC tick interval (16.16 format)">2000</pattr>
    <pattr name="Run-time logging UART RX pin"></pattr>
    <pattr name="Run-time logging UART TX pin"></pattr>
    <task name="SPI Accelerometer">
        <desc><![CDATA[Samples the ADXL362 accelerometer on the LPSTK board, and performs simple filtering and tilt detection.

The accelerometer is used with default configuration (2g, 100 Hz sampling), with data ready interrupt on the INT1 pin.
The data ready interrupt triggers the Event Handler A Code, which:
- Reads the values for each channel (X, Y and Z)
- Uses a sliding window for each channel to filter the values
- Performs simple tilt detection on the filtered values: abs(X) > abs(Z), and abs(Y) > abs(Z)

The Event Handler B Code implements data ready interrupt timeout, with error indication. The Event Handler A Code restarts the timeout.
Timeout occurs if the data ready interrupt interval exceeds 20 ms (expected interval is 10 ms).

Task Testing should only be used for debugging purposes, as it will not run the SPI Accelerometer task at the correct rate. Use Run-Time Logging for testing, performance evaluation and tuning.

The accelerometer orientation is printed on the board.]]></desc>
        <tattr name="ACCEL_FC_HALF_BW" desc="Filter control: Use halved bandwidth" type="hex" content="const" scope="task" min="0000" max="ffff">0010</tattr>
        <tattr name="ACCEL_FC_ODR_100_HZ" desc="Filter control: Output data rate 100 Hz" type="hex" content="const" scope="task" min="0000" max="ffff">0003</tattr>
        <tattr name="ACCEL_FC_ODR_12P5_HZ" desc="Filter control: Output data rate 12.5 Hz" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="ACCEL_FC_ODR_200_HZ" desc="Filter control: Output data rate 200 Hz" type="hex" content="const" scope="task" min="0000" max="ffff">0004</tattr>
        <tattr name="ACCEL_FC_ODR_25_HZ" desc="Filter control: Output data rate 25 Hz" type="hex" content="const" scope="task" min="0000" max="ffff">0001</tattr>
        <tattr name="ACCEL_FC_ODR_400_HZ" desc="Filter control: Output data rate 400 Hz" type="hex" content="const" scope="task" min="0000" max="ffff">0005</tattr>
        <tattr name="ACCEL_FC_ODR_50_HZ" desc="Filter control: Output data rate 50 Hz" type="hex" content="const" scope="task" min="0000" max="ffff">0002</tattr>
        <tattr name="ACCEL_FC_ODR_800_HZ" desc="Filter control: Output data rate 800 Hz" type="hex" content="const" scope="task" min="0000" max="ffff">0006</tattr>
        <tattr name="ACCEL_FC_RANGE_2_G" desc="Filter control: Selects range +/- 2 g" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="ACCEL_FC_RANGE_4_G" desc="Filter control: Selects range +/- 4 g" type="hex" content="const" scope="task" min="0000" max="ffff">0040</tattr>
        <tattr name="ACCEL_FC_RANGE_8_G" desc="Filter control: Selects range +/- 8 g" type="hex" content="const" scope="task" min="0000" max="ffff">0080</tattr>
        <tattr name="ACCEL_IM_ACT" desc="Interrupt mapping: Activity status" type="hex" content="const" scope="task" min="0000" max="ffff">0010</tattr>
        <tattr name="ACCEL_IM_AWAKE" desc="Interrupt mapping: Awake status" type="hex" content="const" scope="task" min="0000" max="ffff">0040</tattr>
        <tattr name="ACCEL_IM_DATA_READY" desc="Interrupt mapping: Data ready status" type="hex" content="const" scope="task" min="0000" max="ffff">0001</tattr>
        <tattr name="ACCEL_IM_FIFO_OVERRUN" desc="Interrupt mapping: FIFO overrun status" type="hex" content="const" scope="task" min="0000" max="ffff">0008</tattr>
        <tattr name="ACCEL_IM_FIFO_READY" desc="Interrupt mapping: FIFO ready status" type="hex" content="const" scope="task" min="0000" max="ffff">0002</tattr>
        <tattr name="ACCEL_IM_FIFO_WATERMARK" desc="Interrupt mapping: FIFO watermark status" type="hex" content="const" scope="task" min="0000" max="ffff">0004</tattr>
        <tattr name="ACCEL_IM_INACT" desc="Interrupt mapping: Inactivity status" type="hex" content="const" scope="task" min="0000" max="ffff">0020</tattr>
        <tattr name="ACCEL_IM_INT_LOW" desc="Interrupt mapping: Active low" type="hex" content="const" scope="task" min="0000" max="ffff">0080</tattr>
        <tattr name="ACCEL_PC_LOW_NOISE_0" desc="Power control: Selects normal operation" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="ACCEL_PC_LOW_NOISE_1" desc="Power control: Selects low noise operation" type="hex" content="const" scope="task" min="0000" max="ffff">0010</tattr>
        <tattr name="ACCEL_PC_LOW_NOISE_2" desc="Power control: Selects ultralow noise operation" type="hex" content="const" scope="task" min="0000" max="ffff">0020</tattr>
        <tattr name="ACCEL_PC_MEASURE_OFF" desc="Power control: Selects standby mode" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="ACCEL_PC_MEASURE_ON" desc="Power control: Selects standby mode" type="hex" content="const" scope="task" min="0000" max="ffff">0002</tattr>
        <tattr name="ACCEL_REG_FILTER_CTL" desc="Accelerometer register address: FILTER_CTL" type="hex" content="const" scope="task" min="0000" max="ffff">002c</tattr>
        <tattr name="ACCEL_REG_INTMAP1" desc="Accelerometer register address: INTMAP1" type="hex" content="const" scope="task" min="0000" max="ffff">002a</tattr>
        <tattr name="ACCEL_REG_PARTID" desc="Accelerometer register address: PARTID" type="hex" content="const" scope="task" min="0000" max="ffff">0002</tattr>
        <tattr name="ACCEL_REG_POWER_CTL" desc="Accelerometer register address: POWER_CTL" type="hex" content="const" scope="task" min="0000" max="ffff">002d</tattr>
        <tattr name="ACCEL_REG_REVID" desc="Accelerometer register address: REVID" type="hex" content="const" scope="task" min="0000" max="ffff">0003</tattr>
        <tattr name="ACCEL_REG_SOFT_RESET" desc="Accelerometer register address: SOFT_RESET" type="hex" content="const" scope="task" min="0000" max="ffff">001f</tattr>
        <tattr name="ACCEL_REG_STATUS" desc="Accelerometer register address: STATUS" type="hex" content="const" scope="task" min="0000" max="ffff">000b</tattr>
        <tattr name="ACCEL_REG_XDATAL" desc="Accelerometer register address: XDATAL" type="hex" content="const" scope="task" min="0000" max="ffff">000e</tattr>
        <tattr name="ACCEL_REG_YDATAL" desc="Accelerometer register address: YDATAL" type="hex" content="const" scope="task" min="0000" max="ffff">0010</tattr>
        <tattr name="ACCEL_REG_ZDATAL" desc="Accelerometer register address: ZDATAL" type="hex" content="const" scope="task" min="0000" max="ffff">0012</tattr>
        <tattr name="ACCEL_SPI_READ" desc="Accelerometer read operation" type="hex" content="const" scope="task" min="0000" max="ffff">000b</tattr>
        <tattr name="ACCEL_SPI_WRITE" desc="Accelerometer write operation" type="hex" content="const" scope="task" min="0000" max="ffff">000a</tattr>
        <tattr name="ACCEL_SR_KEY" desc="Software reset: Trigger key" type="hex" content="const" scope="task" min="0000" max="ffff">0052</tattr>
        <tattr name="XYZ_WINDOW_SIZE" desc="Size of the X, Y and Z sample windows" type="dec" content="const" scope="task" min="0" max="65535">8</tattr>
        <tattr name="output.accelError" desc="Accelerometer error (no interrupt)" type="dec" content="struct" scope="task" min="0" max="1">0</tattr>
        <tattr name="output.x" desc="For observation: Latest X-axis sample" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.xFiltered" desc="For observation: Sum of all samples in the X-axis sample window" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.xTiltDet" desc="1 when tilting along the X-axis is detected, otherwise 0" type="dec" content="struct" scope="task" min="0" max="1">0</tattr>
        <tattr name="output.y" desc="For observation: Latest Y-axis sample" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.yFiltered" desc="For observation: Sum of all samples in the Y-axis sample window" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.yTiltDet" desc="1 when tilting along the Y-axis is detected, otherwise 0" type="dec" content="struct" scope="task" min="0" max="1">0</tattr>
        <tattr name="output.z" desc="For observation: Latest Z-axis sample" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="output.zFiltered" desc="For observation: Sum of all samples in the Z-axis sample window" type="dec" content="struct" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="state.initIgnoreSmpl" desc="Used to ignore the first invalid samples, and then fill the sample windows" type="expr" content="struct" scope="task" min="0" max="65535">5 + (XYZ_WINDOW_SIZE - 1)</tattr>
        <tattr name="state.pXWindow" desc="X-axis sample window, used for filtering" size="XYZ_WINDOW_SIZE" type="dec" content="struct_array" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="state.pYWindow" desc="Y-axis sample window, used for filtering" size="XYZ_WINDOW_SIZE" type="dec" content="struct_array" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="state.pZWindow" desc="Z-axis sample window, used for filtering" size="XYZ_WINDOW_SIZE" type="dec" content="struct_array" scope="task" min="-32768" max="32767">0</tattr>
        <tattr name="state.windowPos" desc="Sample window position" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <resource_ref name="ADC" enabled="0"/>
        <resource_ref name="AON Domain Functionality" enabled="0"/>
        <resource_ref name="Accumulator-Based Math" enabled="0"/>
        <resource_ref name="Analog Open-Drain Pins" enabled="0"/>
        <resource_ref name="Analog Open-Source Pins" enabled="0"/>
        <resource_ref name="Analog Pins" enabled="0"/>
        <resource_ref name="COMPA" enabled="0"/>
        <resource_ref name="COMPA Event Trigger" enabled="0"/>
        <resource_ref name="COMPB" enabled="0"/>
        <resource_ref name="COMPB Event Trigger" enabled="0"/>
        <resource_ref name="Delay Insertion" enabled="1"/>
        <resource_ref name="Differential Output Pins" enabled="0"/>
        <resource_ref name="Digital Input Pins" enabled="1">
            <io_usage name="ACCEL_IRQ" label="Accelerometer interrupt pin">
                <uattr name="Configuration on initialization">-1</uattr>
                <uattr name="Configuration on uninitialization">-1</uattr>
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO30</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Digital Open-Drain Pins" enabled="0"/>
        <resource_ref name="Digital Open-Source Pins" enabled="0"/>
        <resource_ref name="Digital Output Pins" enabled="0"/>
        <resource_ref name="Dynamic Power Control" enabled="0"/>
        <resource_ref name="GPIO Event Trigger" enabled="1"/>
        <resource_ref name="I2C Master" enabled="0">
            <rattr name="SCL frequency">400</rattr>
            <rattr name="SCL stretch timeout">1</rattr>
            <io_usage>
                <uattr name="SCL pin/0000"></uattr>
                <uattr name="SDA pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="ISRC" enabled="0"/>
        <resource_ref name="LCD Controller" enabled="0">
            <rattr name="Waveform state count">8</rattr>
            <io_usage>
                <uattr name="Output drive strength">0</uattr>
                <uattr name="Pin count">20</uattr>
                <uattr name="Pin/0000"></uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Math and Logic" enabled="1"/>
        <resource_ref name="Multi-Buffered Output Data Exchange" enabled="0">
            <rattr name="Buffer count">3</rattr>
            <rattr name="Indicate overflow at buffer check">1</rattr>
            <rattr name="Indicate overflow at buffer switch">1</rattr>
            <rattr name="Prevent overflow at buffer switch">0</rattr>
        </resource_ref>
        <resource_ref name="Peripheral Sharing" enabled="0"/>
        <resource_ref name="Pulse Counter" enabled="0"/>
        <resource_ref name="RTC Multi-Event Capture" enabled="0"/>
        <resource_ref name="RTC-Based Execution Scheduling" enabled="0"/>
        <resource_ref name="Reference DAC" enabled="0"/>
        <resource_ref name="Run-Time Logging" enabled="1"/>
        <resource_ref name="SPI Chip Select" enabled="1">
            <io_usage name="ACCEL" label="Accelerometer">
                <uattr name="CSN configuration when idle">0</uattr>
                <uattr name="CSN pin/0000">DIO11</uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="SPI Data Transfer" enabled="1">
            <rattr name="Bit rate">0</rattr>
            <rattr name="MISO configuration when inactive">-1</rattr>
            <rattr name="MOSI configuration on initialization">0</rattr>
            <rattr name="MOSI configuration on uninitialization">0</rattr>
            <rattr name="SCLK configuration on initialization">0</rattr>
            <rattr name="SCLK configuration on uninitialization">0</rattr>
            <io_usage>
                <uattr name="MISO pin/0000">DIO8</uattr>
                <uattr name="MOSI pin/0000">DIO9</uattr>
                <uattr name="SCLK pin/0000">DIO10</uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Signal Observation" enabled="0"/>
        <resource_ref name="System CPU Alert" enabled="1"/>
        <resource_ref name="System Event Trigger" enabled="0"/>
        <resource_ref name="TDC" enabled="0"/>
        <resource_ref name="Timer 0" enabled="0"/>
        <resource_ref name="Timer 0 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 1" enabled="0"/>
        <resource_ref name="Timer 1 Event Trigger" enabled="1"/>
        <resource_ref name="Timer 2" enabled="0"/>
        <resource_ref name="Timer 2 Event Trigger" enabled="0"/>
        <resource_ref name="UART Emulator" enabled="0">
            <rattr name="RX buffer size">64</rattr>
            <rattr name="Required idle period before enabling RX">11</rattr>
            <rattr name="TX buffer size">64</rattr>
            <io_usage>
                <uattr name="RX pin/0000"></uattr>
                <uattr name="TX pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <sccode name="event0" init_power_mode="0"><![CDATA[// MACRO: Reads the current X, Y or Z value over SPI, and:
// - Stores it in the output data structure, for debug/logging purposes
// - Inserts it into the sample window, for filtering and further processing
macro spiRxAccelSample(axis, pAxisWindow, n) {
    U16 value;
    spiRx16bit(value);
    utilSwapEndianess(value; value);
    output.axis = value;
    state.pAxisWindow[n] = value;
}

// MACRO: Calculates the sum of the specified sample window
macro getXyzWindowSum(pAxisWindow, axisFiltered) {
    S16 sum = 0;
    for (U16 n = 0; n < XYZ_WINDOW_SIZE; n++) {
        sum += pAxisWindow[n];
    }
    axisFiltered = sum;
}


// Read the accelerometer X, Y and Z values
U16 n = state.windowPos;
spiBegin(AUXIO_SPI_CSN_ACCEL);
spiTx8bit(ACCEL_SPI_READ);
spiTx8bit(ACCEL_REG_XDATAL);
spiRxAccelSample(x, pXWindow, n);
spiRxAccelSample(y, pYWindow, n);
spiRxAccelSample(z, pZWindow, n);
spiEnd(AUXIO_SPI_CSN_ACCEL);
utilIncrAndWrap(n, XYZ_WINDOW_SIZE; state.windowPos);

// Filter the X, Y and Z values. The filtered value is the sum of all samples in the
// window. The window size is XYZ_WINDOW_SIZE.
getXyzWindowSum(state.pXWindow, output.xFiltered);
getXyzWindowSum(state.pYWindow, output.yFiltered);
getXyzWindowSum(state.pZWindow, output.zFiltered);

// At startup:
// - First ignore the initial samples from the accelerometer
// - Then fill up the sample window before using the filtered value
if (state.initIgnoreSmpl > 0) {
    state.initIgnoreSmpl -= 1;

// Normal operation:
} else {

    // Detect tilting by more than 45 degrees in X direction
    U16 xFilteredAbs = @(output.xFiltered);
    U16 zFilteredAbs = @(output.zFiltered);
    U16 xTiltDet = 0;
    if (xFilteredAbs > zFilteredAbs) {
        xTiltDet = 1;
    }

    // Detect tilting by more than 45 degrees in Y direction
    U16 yFilteredAbs = @(output.yFiltered);
    U16 yTiltDet = 0;
    if (yFilteredAbs > zFilteredAbs) {
        yTiltDet = 1;
    }

    // Generate ALERT interrupt if tilt detection has changed
    if (xTiltDet != output.xTiltDet) {
        fwGenAlertInterrupt();
    } else if (yTiltDet != output.yTiltDet) {
        fwGenAlertInterrupt();
    }
    output.xTiltDet = xTiltDet;
    output.yTiltDet = yTiltDet;

    // Run-time logging
    rtlLogStructs(BV_RTL_LOG_OUTPUT);
}

// Detect accelerometer failure (no interrupt occurred for 20 ms (expected interval is 10 ms)
evhSetupTimer1Trigger(1, 20, 2);

// Wake up again on the next accelerometer interrupt
evhSetupGpioTrigger(0, AUXIO_I_ACCEL_IRQ, 1, EVH_GPIO_TRIG_ON_MATCH);]]></sccode>
        <sccode name="event1" init_power_mode="0"><![CDATA[// Stop handling the accelerometer interrupt
evhCancelTrigger(0);

// Indicate error
output.accelError = 1;
fwGenAlertInterrupt();

// Run-time logging
rtlLogStructs(BV_RTL_LOG_OUTPUT);]]></sccode>
        <sccode name="event2" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event3" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="execute" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="initialize" init_power_mode="0"><![CDATA[macro spiWriteReg(addr, value) {
    spiBegin(AUXIO_SPI_CSN_ACCEL);
    spiTx8bit(ACCEL_SPI_WRITE);
    spiTx8bit(addr);
    spiTx8bit(value);
    spiEnd(AUXIO_SPI_CSN_ACCEL);
}

// Configure the SPI peripheral
spiCfg(SPI_POL0_PHA0, 1);

// Perform soft reset, then wait 100 ms
spiWriteReg(ACCEL_REG_SOFT_RESET, ACCEL_SR_KEY);
fwDelayUs(50000);
fwDelayUs(50000);

// Perform one-time configuration of the ADXL362 accelerometer
spiWriteReg(ACCEL_REG_INTMAP1, ACCEL_IM_DATA_READY);
spiWriteReg(ACCEL_REG_POWER_CTL, ACCEL_PC_LOW_NOISE_0 | ACCEL_PC_MEASURE_ON);

// Detect accelerometer failure (no interrupt occurred for 20 ms (expected interval is 10 ms)
evhSetupTimer1Trigger(1, 20, 2);

// Wake up on accelerometer interrupt
evhSetupGpioTrigger(0, AUXIO_I_ACCEL_IRQ, 1, EVH_GPIO_TRIG_ON_MATCH);]]></sccode>
        <sccode name="terminate" init_power_mode="0"><![CDATA[macro spiWriteReg(addr, value) {
    spiBegin(AUXIO_SPI_CSN_ACCEL);
    spiTx8bit(ACCEL_SPI_WRITE);
    spiTx8bit(addr);
    spiTx8bit(value);
    spiEnd(AUXIO_SPI_CSN_ACCEL);
}

// Stop the event handler code triggers
evhCancelTrigger(0);
evhCancelTrigger(1);

// Disable the accelerometer
spiWriteReg(ACCEL_REG_POWER_CTL, ACCEL_PC_MEASURE_OFF);]]></sccode>
        <event_trigger active_count="2">0,1,2,3</event_trigger>
        <tt_iter>run_event0</tt_iter>
        <tt_struct>output.xFiltered,output.xTiltDet,output.yFiltered,output.yTiltDet,output.zFiltered</tt_struct>
        <rtl_struct>output.xFiltered,output.xTiltDet,output.yFiltered,output.yTiltDet,output.zFiltered</rtl_struct>
        <rtl_task_sel en="1" struct_log_list="output"/>
    </task>
</project>
