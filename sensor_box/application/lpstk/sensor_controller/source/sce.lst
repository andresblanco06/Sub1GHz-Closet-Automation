               .deffile adi_defs__1.asm
               .deffile ddi_defs__1.asm
               .deffile reg_defs__1.asm
               .deffile sce_defs__1.asm

               ; Number of supported tasks
               .define TASK_COUNT      3

               ; Sensor Controller clock frequency in active mode
               .define ACTIVE_MODE_SCE_CLK_FREQ_MHZ    2

               ; Resource-specified definitions, if any
               .define AUXIO_I2C_SCL           14
               .define AUXIO_I2C_SDA           13
               .define I2C_BASE_DELAY          9
               .define I2C_EXT_DELAY           4
               .define I2C_STRETCH_TIMEOUT_US  10
               .define I2C_WAIT_STRETCH_DELAY  5


               .segment begin "Framework"


               VectorTable:
                                       ; SW 0
0000 ---- 140e                         jsr         PowerUp
0001 ---- 0417                         jmp         TaskCtrlReqVector
                                       ; SW 1
0002 ---- 140e                         jsr         PowerUp
0003 ---- 0440                         jmp         EventManTrigVector
                                       ; PROG 0
0004 ---- 140e                         jsr         PowerUp
0005 ---- 044a                         jmp         AonRtcCh2Vector
                                       ; PROG 1
0006 ---- 140e                         jsr         PowerUp
0007 ---- 0467                         jmp         Event0Vector
                                       ; PROG 2
0008 ---- 140e                         jsr         PowerUp
0009 ---- 0470                         jmp         Event1Vector
                                       ; PROG 3
000a ---- 140e                         jsr         PowerUp
000b ---- 0479                         jmp         Event2Vector
                                       ; SW 2
000c ---- 140e                         jsr         PowerUp
000d ---- 0482                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Make sure that the last operation mode request has taken effect
000e ---- 8953                         in          R0, [#IOP_SYSIF_OPMODEREQ]
000f ---- 9954 /waitForOpmodeSync:     in          R1, [#IOP_SYSIF_OPMODEACK]
0010 ---- 8d29                         cmp         R0, R1
0011 ---- befd                         bneq        /waitForOpmodeSync

                                       ; Deassert the power-down request
0012 ---- 4553                         iobclr      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
0013 ---- 2554 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEACK]
0014 ---- aefe                         biob1       /waitForOpmodeAck

                                       ; Prevent wake-up events from propagating to the AON domain
0015 ---- 445c                         iobclr      #0, [#IOP_SYSIF_WUGATE]

               FwEmptyFunc:            ; Done
0016 ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear wake-up event
0017 ---- 745b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU0, [#IOP_SYSIF_WUFLAGSCLR]
0018 ---- 545b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU0, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; For each task ...
0019 ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
001a ---- 7cb8                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
001b ---- 68c1                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001c ---- 00a9                             ld          R0, #pFwTaskInitializeFuncTable
001d ---- 1439                             jsr         /handleReq

                                           ; Handle execute request, if any
001e ---- 68c2                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
001f ---- 00ac                             ld          R0, #pFwTaskExecuteFuncTable
0020 ---- 1439                             jsr         /handleReq

                                           ; Handle terminate request, if any
0021 ---- 68c3                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0022 ---- 00af                             ld          R0, #pFwTaskTerminateFuncTable
0023 ---- 1439                             jsr         /handleReq

                                           ; Move on to the next task
0024 ---- 78b8                             ld          R7, [#fwCtrlInt/taskId]
0025 ---- f801                             add         R7, #1

0026 ---- fa03                         cmp         R7, #TASK_COUNT
0027 ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
0028 ---- 78bf                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
0029 ---- 68c1                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
002a ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
002b ---- 68c3                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
002c ---- ed92                         inv         R6
002d ---- fd06                         and         R7, R6
002e ---- 7cbf                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; Has the run-time logging application requested locked struct access?
002f ---- 78be                         ld          R7, [#fwCtrlInt/rtlStructLockReq]
0030 ---- fa01                         cmp         R7, #1
0031 ---- be05                         bneq        /noRtlStructWriteReq

                                           ; Signalize that we're ready
0032 ---- 7002                             ld          R7, #2
0033 ---- 7cbe                             st          R7, [#fwCtrlInt/rtlStructLockReq]

               /waitRtlStructWriteLoop:    ; Wait until the run-time logging application is done
0034 ---- 78be                             ld          R7, [#fwCtrlInt/rtlStructLockReq]
0035 ---- fa00                             cmp         R7, #0
0036 ---- befd                             bneq        /waitRtlStructWriteLoop
               /noRtlStructWriteReq:
                                       ; We're READY for another request
0037 ---- 6440                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0038 ---- 0487                         jmp         PowerDownSequence;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0039 ---- 78b8                         ld          R7, [#fwCtrlInt/taskId]
003a ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
003b ---- ed8f                         lsr         R6, R7
003c ---- ec01                         tst         R6, #0x0001
003d ---- be01                         bnz         /noSkip
003e ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
003f ---- 8db7                         jmp         R0




               EventManTrigVector:
                                       ; Clear wake-up event
0040 ---- 755b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU1, [#IOP_SYSIF_WUFLAGSCLR]
0041 ---- 555b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU1, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Reconfigure the programmable wake-up, and trigger it
0042 ---- 78bd                         ld          R7, [#fwCtrlInt/progwucfgManTrigReg]
0043 ---- 60bf                         ld          R6, #(BV_SYSIF_PROGWUCFG_POL | SYSIF_PROGWUCFG_SRC_NO_EVENT)
0044 ---- ef27                         out         R6, [R7]
0045 ---- e240                         or          R6, #BV_SYSIF_PROGWUCFG_EN
0046 ---- ef27                         out         R6, [R7]

                                       ; Indicate completion
0047 ---- 7000                         ld          R7, #0x0000
0048 ---- 7cbd                         st          R7, [#fwCtrlInt/progwucfgManTrigReg]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0049 ---- 0487                         jmp         PowerDownSequence;




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
004a ---- 6477                         iobset      #0, [#IOP_SYSIF_RTCEVCLR]

                                       ; For each task (R0 is the current task ID) ...
004b ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
004c ---- 18bf                             ld          R1, [#fwCtrlExt/bvActiveTasks]
004d ---- 9d88                             lsr         R1, R0
004e ---- 9c01                             tst         R1, #0x0001
004f ---- b60e                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0050 ---- 10a6                                 ld          R1, #pFwTaskExecuteScheduleTable
0051 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0052 ---- aa00                                 cmp         R2, #0
0053 ---- b60a                                 beq         /skip
0054 ---- a8ff                                 add         R2, #-1
0055 ---- af39                                 st          R2, [R1+R0]
0056 ---- be07                                 bnz         /skip

                                                   ; ... execute the task
0057 ---- 0cb8                                     st          R0, [#fwCtrlInt/taskId]
0058 8600 88ac                                     add         R0, #pFwTaskExecuteFuncTable
005a ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
005b ---- fd47                                     nop
005c ---- 9db7                                     jsr         R0
005d ---- 08b8                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
005e ---- 8801                             add         R0, #1

005f ---- 8a03                         cmp         R0, #TASK_COUNT
0060 ---- beeb                         bneq        /loop

                                       ; Wait for the RTC CH2 event clearing to finish
0061 ---- 254f /waitOnRtcEvClr:        iobtst      #IOB_EVCTL_EVSTAT2L_AON_RTC_CH2, [#IOP_EVCTL_EVSTAT2L]
0062 ---- aefe                         biob1       /waitOnRtcEvClr

                                       ; Clear event edge detector
0063 ---- 645b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU0, [#IOP_SYSIF_WUFLAGSCLR]
0064 ---- 445b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU0, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; End clearing the RTC event
0065 ---- 4477                         iobclr      #0, [#IOP_SYSIF_RTCEVCLR]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0066 ---- 0487                         jmp         PowerDownSequence;




               Event0Vector:
                                       ; Disable and clear wake-up event
0067 ---- 5656                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU1CFG] ; Disable source
0068 ---- 655b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU1,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
0069 ---- 455b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU1,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
006a ---- 0000                         ld          R0, #0
006b ---- 0cb8                         st          R0, [#fwCtrlInt/taskId]
006c ---- 0001                         ld          R0, #(1 << 0)
006d ---- 0cb9                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
006e ---- 1516                         jsr         i2cTempAndHumiditySensor/event0

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
006f ---- 0487                         jmp         PowerDownSequence;




               Event1Vector:
                                       ; Disable and clear wake-up event
0070 ---- 5657                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU2CFG] ; Disable source
0071 ---- 665b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU2,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
0072 ---- 465b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU2,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
0073 ---- 0000                         ld          R0, #0
0074 ---- 0cb8                         st          R0, [#fwCtrlInt/taskId]
0075 ---- 0002                         ld          R0, #(1 << 1)
0076 ---- 0cb9                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
0077 ---- 1516                         jsr         i2cTempAndHumiditySensor/event0

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0078 ---- 0487                         jmp         PowerDownSequence;




               Event2Vector:
                                       ; Disable and clear wake-up event
0079 ---- 5658                         iobclr      #IOB_SYSIF_PROGWUCFG_EN,        [#IOP_SYSIF_PROGWU3CFG] ; Disable source
007a ---- 675b                         iobset      #IOB_SYSIF_WUFLAGS_PROG_WU3,    [#IOP_SYSIF_WUFLAGSCLR] ; Clear edge detector
007b ---- 475b                         iobclr      #IOB_SYSIF_WUFLAGS_PROG_WU3,    [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Set the task ID and active event index
007c ---- 0002                         ld          R0, #2
007d ---- 0cb8                         st          R0, [#fwCtrlInt/taskId]
007e ---- 0004                         ld          R0, #(1 << 2)
007f ---- 0cb9                         st          R0, [#fwCtrlInt/bvActiveEvent]

                                       ; Jump to the event task code
0080 ---- 1689                         jsr         i2cLightSensor/event0

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
0081 ---- 0487                         jmp         PowerDownSequence;




               TaskAlertAckVector:
                                       ; Clear wake-up event
0082 ---- 765b                         iobset      #IOB_SYSIF_WUFLAGS_SW_WU2, [#IOP_SYSIF_WUFLAGSCLR]
0083 ---- 565b                         iobclr      #IOB_SYSIF_WUFLAGS_SW_WU2, [#IOP_SYSIF_WUFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
0084 86ff 03ff                         ld          R0, #0xFFFF
0086 ---- 0cbb                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Generate an ALERT interrupt (if requested) and return to sleep
                                       ; -> Fall through




               PowerDownSequence:
                                       ; Let wake-up events propagate to the AON domain
0087 ---- 645c                         iobset      #0, [#IOP_SYSIF_WUGATE]

                                       ; Do we have any ALERT-generating flags pending?
0088 ---- 78ba                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0089 ---- 68bb                         ld          R6, [#fwCtrlInt/alertGenMask]
008a ---- ed37                         tst         R6, R7
008b ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
008c ---- 0000                             ld          R0, #0
008d ---- 0cba                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
008e ---- 7cc0                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
008f ---- 6540                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0090 ---- 0cbb                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Set initial power mode for next executed vector
                                       ; -> Only at initialization

                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0091 ---- 78bb                         ld          R7, [#fwCtrlInt/alertGenMask]
0092 ---- 68bc                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
0093 ---- fd0e                         or          R7, R6
0094 ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
0095 ---- e95a                         in          R6, [#IOP_SYSIF_WUFLAGS]
0096 ---- fd0e                         or          R7, R6
0097 ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request
0098 ---- 6553                             iobset      #IOB_SYSIF_OPMODE_PD, [#IOP_SYSIF_OPMODEREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0099 ---- bdb7 sleepInstr:             sleep




               PwrRequestAndWaitForActiveMode:
                                       ; Update Reference DAC clock divider before entering active mode
009a ---- 7000                         ld          R7, #((ACTIVE_MODE_SCE_CLK_FREQ_MHZ / 2) - 1)
009b ---- fb96                         out         R7, [#IOP_ANAIF_DACSMPLCFG0]

                                       ; Deassert the low-power request
009c ---- 4453                         iobclr      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
009d ---- 2454 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEACK]
009e ---- aefe                         biob1       /waitForOpmodeAck

                                       ; Done
009f ---- adb7                         rts




               PwrRequestAndWaitForLowPowerMode:
                                       ; Assert the low-power request
00a0 ---- 6453                         iobset      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEREQ]

                                       ; Wait for it to take effect
00a1 ---- 2454 /waitForOpmodeAck:      iobtst      #IOB_SYSIF_OPMODE_LP, [#IOP_SYSIF_OPMODEACK]
00a2 ---- a6fe                         biob0       /waitForOpmodeAck

                                       ; Update Reference DAC clock divider after leaving active mode
00a3 ---- 7000                         ld          R7, #(1 - 1)
00a4 ---- fb96                         out         R7, [#IOP_ANAIF_DACSMPLCFG0]

                                       ; Done
00a5 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
00a6 ---- 0000                         dw          #0
00a7 ---- 0000                         dw          #0
00a8 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
00a9 ---- 00d8                         dw          #i2cTempAndHumiditySensor/initialize
00aa ---- 01b8                         dw          #sgp30GasSensor/initialize
00ab ---- 026d                         dw          #i2cLightSensor/initialize
               pFwTaskExecuteFuncTable:
00ac ---- 0114                         dw          #i2cTempAndHumiditySensor/execute
00ad ---- 01bd                         dw          #sgp30GasSensor/execute
00ae ---- 0287                         dw          #i2cLightSensor/execute
               pFwTaskTerminateFuncTable:
00af ---- 01a7                         dw          #i2cTempAndHumiditySensor/terminate
00b0 ---- 0268                         dw          #sgp30GasSensor/terminate
00b1 ---- 02d9                         dw          #i2cLightSensor/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
00b2 ---- 0000                         dw          #0x0000
00b3 ---- 0000                         dw          #0x0000
00b4 ---- 0000                         dw          #0x0000
               pRtlTaskLogMaskTable:
00b5 ---- 0000                         dw          #0x0000
00b6 ---- 0000                         dw          #0x0000
00b7 ---- 0000                         dw          #0x0000


               ; Internal control data
               fwCtrlInt:
00b8 ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
00b9 ---- 0000 /bvActiveEvent:         dw          #0      ; Bit-vector indicating index of the currently active event trigger
00ba ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
00bb ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
00bc ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
00bd ---- 0000 /progwucfgManTrigReg:   dw          #0x0000 ; Address of PROGWUnCFG register to be triggered manually by EventManTriggerVector
00be ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
00bf ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
00c0 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
00c1 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
00c2 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
00c3 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: I2C Temp and Humidity Sensor"
               i2cTempAndHumiditySensor/cfg:
               i2cTempAndHumiditySensor/cfg/humChangeThr:
00c4 ---- 0000                         dw          #0
               i2cTempAndHumiditySensor/cfg/tempChangeThr:
00c5 ---- 0000                         dw          #0
               i2cTempAndHumiditySensor/input:
               i2cTempAndHumiditySensor/output:
               i2cTempAndHumiditySensor/output/bvReport:
00c6 ---- 0000                         dw          #0
               i2cTempAndHumiditySensor/output/hum:
00c7 ---- 0000                         dw          #0
               i2cTempAndHumiditySensor/output/pHumLog:
00c8 ---- 0000                         dw          #0
               i2cTempAndHumiditySensor/output/pTempLog:
00c9 ---- 0000                         dw          #0
               i2cTempAndHumiditySensor/output/temp:
00ca ---- 0000                         dw          #0
               i2cTempAndHumiditySensor/state:
               i2cTempAndHumiditySensor/state/i2cStatus:
00cb ---- 0000                         dw          #0
               i2cTempAndHumiditySensor/state/logPos:
00cc ---- 0000                         dw          #0
               .segment end "Task: I2C Temp and Humidity Sensor"
               .segment begin "Task: SGP30 Gas Sensor"
               sgp30GasSensor/cfg:
               sgp30GasSensor/input:
               sgp30GasSensor/input/absoluteHumidity:
00cd ---- ff00                         dw          #65280
               sgp30GasSensor/input/crc:
00ce ---- 00ff                         dw          #255
               sgp30GasSensor/output:
               sgp30GasSensor/output/co2:
00cf ---- 0000                         dw          #0
               sgp30GasSensor/output/tvoc:
00d0 ---- 0000                         dw          #0
               sgp30GasSensor/state:
               sgp30GasSensor/state/i2cStatus:
00d1 ---- 0000                         dw          #0
               sgp30GasSensor/state/sgp30state:
00d2 ---- 0000                         dw          #0
               .segment end "Task: SGP30 Gas Sensor"
               .segment begin "Task: I2C Light Sensor"
               i2cLightSensor/cfg:
               i2cLightSensor/cfg/highThreshold:
00d3 ---- ffff                         dw          #65535
               i2cLightSensor/cfg/lowThreshold:
00d4 ---- 0000                         dw          #0
               i2cLightSensor/input:
               i2cLightSensor/output:
               i2cLightSensor/output/value:
00d5 ---- 0000                         dw          #0
               i2cLightSensor/state:
               i2cLightSensor/state/i2cStatus:
00d6 ---- 0000                         dw          #0
               i2cLightSensor/state/state:
00d7 ---- 0000                         dw          #0
               .segment end "Task: I2C Light Sensor"


               .segment begin "Task: I2C Temp and Humidity Sensor"
               i2cTempAndHumiditySensor/initialize:
                                       ; Start in low_power mode
00d8 ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;? // Perform soft reset
               ;? i2cDeviceWriteReg8(HDC_I2C_ADDR, HDC_REG_CFG_RES_INT_AMM, BV_HDC_CFG_RES_SOFT_RESET);
00d9 ---- 500e                         ld          R5, #14
00da ---- 4080                         ld          R4, #128
00db ---- 68cb                         ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
00dc ---- 70e0                         ld          R7, #/id0156
00dd ---- 7eec                         st          R7, [#i2cDeviceCommonReturn]
00de ---- 7082                         ld          R7, #(130 | 0)
00df ---- 06ed                         jmp         I2cDeviceWriteReg8
               /id0156:
00e0 ---- 0ae9                         ld          R0, [#i2cDeviceCommonBackupR0]
00e1 ---- 6ccb                         st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;? fwDelayUs(50000);
00e2 86c3 0350                         ld          R0, #-15536
00e4 ---- 8801                         add         R0, #1
00e5 ---- 8b49                         out         R0, [#IOP_EVCTL_PROGDLY]
00e6 ---- 8db1                         wev1        #WEVSEL_PROG_DLY
               ;?
               ;? // Configure:
               ;? // - 14-bit temperature and humidity
               ;? // - Autonomous sampling at 1 Hz (higher measurement frequency can cause self-heating)
               ;? // - Interrupt on data ready, interrupt pin active low
               ;? i2cDeviceWriteReg8(HDC_I2C_ADDR, HDC_REG_INT_ENABLE, BV_HDC_INT_ENABLE_DRDY);
00e7 ---- 5007                         ld          R5, #7
00e8 ---- 4080                         ld          R4, #128
00e9 ---- 68cb                         ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
00ea ---- 70ee                         ld          R7, #/id0163
00eb ---- 7eec                         st          R7, [#i2cDeviceCommonReturn]
00ec ---- 7082                         ld          R7, #(130 | 0)
00ed ---- 06ed                         jmp         I2cDeviceWriteReg8
               /id0163:
00ee ---- 0ae9                         ld          R0, [#i2cDeviceCommonBackupR0]
00ef ---- 6ccb                         st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;? i2cDeviceWriteReg8(HDC_I2C_ADDR, HDC_REG_CFG_RES_INT_AMM, (BV_HDC_CFG_INT_ENABLE | BV_HDC_CFG_INT_ACTIVE_LOW) | BV_HDC_CFG_AMM_1_HZ);
00f0 ---- 500e                         ld          R5, #14
00f1 ---- 4044                         ld          R4, #68
00f2 ---- 68cb                         ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
00f3 ---- 70f7                         ld          R7, #/id0169
00f4 ---- 7eec                         st          R7, [#i2cDeviceCommonReturn]
00f5 ---- 7082                         ld          R7, #(130 | 0)
00f6 ---- 06ed                         jmp         I2cDeviceWriteReg8
               /id0169:
00f7 ---- 0ae9                         ld          R0, [#i2cDeviceCommonBackupR0]
00f8 ---- 6ccb                         st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;? i2cDeviceWriteReg8(HDC_I2C_ADDR, HDC_REG_CFG_MEAS, (BV_HDC_CFG_MEAS_HRES_14BIT | BV_HDC_CFG_MEAS_TRES_14BIT) | (BV_HDC_CFG_MEAS_HUM_TEMP | BV_HDC_CFG_MEAS_TRIG));
00f9 ---- 500f                         ld          R5, #15
00fa ---- 4001                         ld          R4, #1
00fb ---- 68cb                         ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
00fc ---- 7100                         ld          R7, #/id0175
00fd ---- 7eec                         st          R7, [#i2cDeviceCommonReturn]
00fe ---- 7082                         ld          R7, #(130 | 0)
00ff ---- 06ed                         jmp         I2cDeviceWriteReg8
               /id0175:
0100 ---- 0ae9                         ld          R0, [#i2cDeviceCommonBackupR0]
0101 ---- 6ccb                         st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?
               ;? // Wake on pin interrupt every 5.0 seconds, with 6.5 second timeout
               ;? evhSetupGpioTrigger(0, AUXIO_I_HDC_INT, 0, EVH_GPIO_TRIG_ON_MATCH);
0102 ---- 0098                         ld          R0, #((24 + SYSIF_PROGWUCFG_SRC_AUXIO0) |((0 == 0) << IOB_SYSIF_PROGWUCFG_POL))
0103 ---- 8b56                         out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
0104 ---- 655b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0105 ---- 455b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0106 ---- 7656                         iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
               ;? evhSetupTimer0Trigger(1, 7500, 2);
0107 861d 014c                         ld          R0, #7500
0109 ---- 8b81                         out         R0, [#IOP_TIMER01_T0TARGET]
010a 8623 0322                         ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
010c ---- 8b7d                         out         R0, [#IOP_TIMER01_T0CFG]
010d ---- 0036                         ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER0_EV
010e ---- 8b57                         out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
010f ---- 665b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
0110 ---- 465b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
0111 ---- 7657                         iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
0112 ---- 647f                         iobset      #0, [#IOP_TIMER01_T0CTL]
               i2cTempAndHumiditySensor/initializeDone:
0113 ---- adb7                         rts




               i2cTempAndHumiditySensor/execute:
                                       ; Start in low_power mode
0114 ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;?
               i2cTempAndHumiditySensor/executeDone:
0115 ---- adb7                         rts




               i2cTempAndHumiditySensor/event0:
                                       ; Start in low_power mode
0116 ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;? // Cancel both event triggers
               ;? evhCancelTrigger(0);
0117 ---- 5656                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
0118 ---- 655b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0119 ---- 455b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
               ;? evhCancelTrigger(1);
011a ---- 5657                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
011b ---- 665b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
011c ---- 465b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
               ;?
               ;? // Default is nothing to report
               ;? U16 bvReport = 0;
011d ---- 1000                         ld          R1, #0
               ;?
               ;? // If the HDC2080 interrupt has occurred...
               ;? U16 bvActiveEventTrigger;
               ;? evhGetActiveTrigger(bvActiveEventTrigger);
011e ---- 08b9                         ld          R0, [#fwCtrlInt/bvActiveEvent]
               ;?
               ;? if (bvActiveEventTrigger & (1 << 0)) {
011f ---- 8c01                         tst         R0, #1
0120 ---- b677                         bz          /id0197
               ;?
               ;?     // Read temperature and humidity in one operation using low-level I2C procedures, for reduced
               ;?     // current consumption. Compared to using 2 * i2cDeviceReadReg16LsbFirst(), this saves:
               ;?     // - 1 * i2cStart()
               ;?     // - 3 * i2cTx()
               ;?     // - 1 * i2cRepeatedStart()
               ;?     // - 1 * i2cStop()
               ;?     i2cStart();
0121 ---- 6000                             ld          R6, #0x0000
0122 ---- 16fe                             jsr         I2cStart
0123 ---- 6ccb                             st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?     i2cTx(HDC_I2C_ADDR | I2C_OP_WRITE);
0124 ---- 7082                             ld          R7, #130
0125 ---- 68cb                             ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
0126 ---- 170e                             jsr         I2cTxByte
0127 ---- 6ccb                             st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?     i2cTx(HDC_REG_TEMP_L);
0128 ---- 7000                             ld          R7, #0
0129 ---- 68cb                             ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
012a ---- 170e                             jsr         I2cTxByte
012b ---- 6ccb                             st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?
               ;?     // If successful so far ...
               ;?     if (state.i2cStatus == 0x0000) {
012c ---- 08cb                             ld          R0, [#i2cTempAndHumiditySensor/state/i2cStatus]
012d ---- 8a00                             cmp         R0, #0
012e ---- be5f                             bneq        /id0210
               ;?         U16 tempL;
               ;?         U16 tempH;
               ;?         U16 humL;
               ;?         U16 humH;
               ;?
               ;?         // Read temperature and humidity register values
               ;?         i2cRepeatedStart();
012f ---- 68cb                                 ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
0130 ---- 16f8                                 jsr         I2cRepeatedStart
0131 ---- 6ccb                                 st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?         i2cTx(HDC_I2C_ADDR | I2C_OP_READ);
0132 ---- 7083                                 ld          R7, #131
0133 ---- 68cb                                 ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
0134 ---- 170e                                 jsr         I2cTxByte
0135 ---- 6ccb                                 st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?         i2cRxAck(tempL); // HDC_REG_TEMP_L
0136 ---- 7000                                 ld          R7, #0x0000
0137 ---- 68cb                                 ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
0138 ---- 173e                                 jsr         I2cRxByte
0139 ---- 6ccb                                 st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
013a ---- 8d47                                 ld          R0, R7
               ;?         i2cRxAck(tempH); // HDC_REG_TEMP_H
013b ---- 7000                                 ld          R7, #0x0000
013c ---- 68cb                                 ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
013d ---- 173e                                 jsr         I2cRxByte
013e ---- 6ccb                                 st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
013f ---- ad47                                 ld          R2, R7
               ;?         i2cRxAck(humL);  // HDC_REG_HUM_L
0140 ---- 7000                                 ld          R7, #0x0000
0141 ---- 68cb                                 ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
0142 ---- 173e                                 jsr         I2cRxByte
0143 ---- 6ccb                                 st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
0144 ---- bd47                                 ld          R3, R7
               ;?         i2cRxNack(humH); // HDC_REG_HUM_H
0145 ---- 7001                                 ld          R7, #0x0001
0146 ---- 68cb                                 ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
0147 ---- 173e                                 jsr         I2cRxByte
0148 ---- 6ccb                                 st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?         i2cStop();
0149 ---- 68cb                                 ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
014a ---- 1703                                 jsr         I2cStop
014b ---- 6ccb                                 st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?
               ;?         // If successful ...
               ;?         if (state.i2cStatus == 0x0000) {
014c ---- 58cb                                 ld          R5, [#i2cTempAndHumiditySensor/state/i2cStatus]
014d ---- da00                                 cmp         R5, #0
014e ---- be3f                                 bneq        /id0232
               ;?
               ;?             // Calculate the temperature (6 fractional bits)
               ;?             S16 temp = (tempH << 8) | tempL;
014f ---- ada0                                     lsl         R2, #8
0150 ---- ad08                                     or          R2, R0
               ;?             accMul16s16u(temp, 165);
0151 ---- 00a5                                     ld          R0, #165
0152 ---- ab09                                     out         R2, [#IOP_MAC_OP0S]
0153 ---- 8b0c                                     out         R0, [#IOP_MAC_OP1UMUL]
               ;?             accGet16(10; temp);
0154 8620 a960                                     in          R2, [#(IOP_MAC_ACC_READ_BASE + (4 * 10))]
               ;?             temp -= 40 << 6;
0156 86f6 a800                                     add         R2, #-2560
               ;?             U16 n = state.logPos;
0158 ---- 08cc                                     ld          R0, [#i2cTempAndHumiditySensor/state/logPos]
               ;?             output.pTempLog[n] = temp;
0159 ---- 50c9                                     ld          R5, #(i2cTempAndHumiditySensor/output/pTempLog + 0)
015a ---- af3d                                     st          R2, [R5+R0]
               ;?
               ;?             // Report significant temperature change?
               ;?             U16 tempChange = @(temp - output.temp);
015b ---- dd42                                     ld          R5, R2
015c ---- 68ca                                     ld          R6, [#i2cTempAndHumiditySensor/output/temp]
015d ---- dd1e                                     sub         R5, R6
015e ---- dd90                                     abs         R5
               ;?             if (tempChange > cfg.tempChangeThr) {
015f ---- 68c5                                     ld          R6, [#i2cTempAndHumiditySensor/cfg/tempChangeThr]
0160 ---- dd2e                                     cmp         R5, R6
0161 ---- 9e02                                     bleu        /id0245
               ;?                 output.temp = temp;
0162 ---- 2cca                                         st          R2, [#i2cTempAndHumiditySensor/output/temp]
               ;?                 bvReport |= BV_REPORT_TEMP_CHANGE;
0163 ---- 9201                                         or          R1, #1
               ;?             }
               /id0245:
               ;?
               ;?             // Calculate the humidity (6 fractional bits)
               ;?             U16 hum = (humH << 8) | humL;
0164 ---- ad47                                     ld          R2, R7
0165 ---- ada0                                     lsl         R2, #8
0166 ---- ad0b                                     or          R2, R3
               ;?             accMul16u16u(hum, 100);
0167 ---- 3064                                     ld          R3, #100
0168 ---- ab0a                                     out         R2, [#IOP_MAC_OP0U]
0169 ---- bb0c                                     out         R3, [#IOP_MAC_OP1UMUL]
               ;?             accGet16(10; hum);
016a 8620 a960                                     in          R2, [#(IOP_MAC_ACC_READ_BASE + (4 * 10))]
               ;?             output.pHumLog[n] = hum;
016c ---- 30c8                                     ld          R3, #(i2cTempAndHumiditySensor/output/pHumLog + 0)
016d ---- af3b                                     st          R2, [R3+R0]
               ;?
               ;?             // Report significant humidity change?
               ;?             U16 humChange = @(hum - output.hum);
016e ---- bd42                                     ld          R3, R2
016f ---- 58c7                                     ld          R5, [#i2cTempAndHumiditySensor/output/hum]
0170 ---- bd1d                                     sub         R3, R5
0171 ---- bd90                                     abs         R3
               ;?             if (humChange > cfg.humChangeThr) {
0172 ---- 58c4                                     ld          R5, [#i2cTempAndHumiditySensor/cfg/humChangeThr]
0173 ---- bd2d                                     cmp         R3, R5
0174 ---- 9e02                                     bleu        /id0259
               ;?                 output.hum = hum;
0175 ---- 2cc7                                         st          R2, [#i2cTempAndHumiditySensor/output/hum]
               ;?                 bvReport |= BV_REPORT_HUM_CHANGE;
0176 ---- 9202                                         or          R1, #2
               ;?             }
               /id0259:
               ;?
               ;?             // Report that the temperature log is full?
               ;?             n += 1;
0177 ---- 8801                                     add         R0, #1
               ;?             if (n == LOG_SIZE) {
0178 ---- 8a01                                     cmp         R0, #1
0179 ---- be02                                     bneq        /id0265
               ;?                 bvReport |= BV_REPORT_LOG_FULL;
017a ---- 9204                                         or          R1, #4
               ;?                 n = 0;
017b ---- 0000                                         ld          R0, #0
               ;?             }
               /id0265:
               ;?             state.logPos = n;
017c ---- 0ccc                                     st          R0, [#i2cTempAndHumiditySensor/state/logPos]
               ;?
               ;?             // Wake on interrupt every 1.0 seconds, with 1.5 second timeout
               ;?             evhSetupGpioTrigger(0, AUXIO_I_HDC_INT, 0, EVH_GPIO_TRIG_ON_MATCH);
017d ---- 0098                                     ld          R0, #((24 + SYSIF_PROGWUCFG_SRC_AUXIO0) |((0 == 0) << IOB_SYSIF_PROGWUCFG_POL))
017e ---- 8b56                                     out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
017f ---- 655b                                     iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0180 ---- 455b                                     iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0181 ---- 7656                                     iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
               ;?             evhSetupTimer0Trigger(1, 7500, 2);
0182 861d 014c                                     ld          R0, #7500
0184 ---- 8b81                                     out         R0, [#IOP_TIMER01_T0TARGET]
0185 8623 0322                                     ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
0187 ---- 8b7d                                     out         R0, [#IOP_TIMER01_T0CFG]
0188 ---- 0036                                     ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER0_EV
0189 ---- 8b57                                     out         R0, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
018a ---- 665b                                     iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
018b ---- 465b                                     iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
018c ---- 7657                                     iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
018d ---- 647f                                     iobset      #0, [#IOP_TIMER01_T0CTL]
               ;?         }
               /id0232:
               ;?     }
               /id0210:
               ;?
               ;?     // If an I2C error occurred ...
               ;?     if (state.i2cStatus != 0x0000) {
018e ---- 08cb                             ld          R0, [#i2cTempAndHumiditySensor/state/i2cStatus]
018f ---- 8a00                             cmp         R0, #0
0190 ---- b606                             beq         /id0273
               ;?
               ;?         // We're using a mix of low-level and high-level I2C procedures in this example, so
               ;?         // clear errors in case the Termination Code runs next
               ;?         state.i2cStatus = 0x0000;
0191 ---- 0000                                 ld          R0, #0
0192 ---- 0ccb                                 st          R0, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?
               ;?         // Report the error and cancel the timeout trigger
               ;?         bvReport |= BV_REPORT_I2C_ERROR;
0193 ---- 9210                                 or          R1, #16
               ;?         evhCancelTrigger(1);
0194 ---- 5657                                 iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
0195 ---- 665b                                 iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
0196 ---- 465b                                 iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
               ;?     }
               /id0273:
               ;?
               ;? // Otherwise ...
               ;? } else {
0197 ---- 059c                         jmp         /id0199
               /id0197:
               ;?
               ;?     // Report timeout and cancel the interrupt GPIO trigger
               ;?     bvReport |= BV_REPORT_INT_TIMEOUT;
0198 ---- 9208                             or          R1, #8
               ;?     evhCancelTrigger(0);
0199 ---- 5656                             iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
019a ---- 655b                             iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
019b ---- 455b                             iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
               ;? }
               /id0199:
               ;?
               ;? // Alert the application if there is anything to report
               ;? output.bvReport = bvReport;
019c ---- 1cc6                         st          R1, [#i2cTempAndHumiditySensor/output/bvReport]
               ;? if (bvReport != 0) {
019d ---- 9a00                         cmp         R1, #0
019e ---- b603                         beq         /id0279
               ;?     fwGenAlertInterrupt();
019f ---- 08ba                             ld          R0, [#fwCtrlInt/bvTaskIoAlert]
01a0 ---- 8201                             or          R0, #(1 << 0)
01a1 ---- 0cba                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;? }
               /id0279:
               ;?
               ;? // Run-time logging
               ;? rtlLogStructs(BV_RTL_LOG_OUTPUT);
01a2 ---- 0004                         ld          R0, #4
01a3 ---- 18b5                         ld          R1, [#(pRtlTaskLogMaskTable + 0)]
01a4 ---- 8d01                         and         R0, R1
01a5 ---- 0cb2                         st          R0, [#(pRtlTaskLogReqTable + 0)]
               i2cTempAndHumiditySensor/event0Done:
01a6 ---- adb7                         rts




               i2cTempAndHumiditySensor/terminate:
                                       ; Start in low_power mode
01a7 ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;? // Perform soft reset
               ;? i2cDeviceWriteReg8(HDC_I2C_ADDR, HDC_REG_CFG_RES_INT_AMM, BV_HDC_CFG_RES_SOFT_RESET);
01a8 ---- 500e                         ld          R5, #14
01a9 ---- 4080                         ld          R4, #128
01aa ---- 68cb                         ld          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
01ab ---- 71af                         ld          R7, #/id0284
01ac ---- 7eec                         st          R7, [#i2cDeviceCommonReturn]
01ad ---- 7082                         ld          R7, #(130 | 0)
01ae ---- 06ed                         jmp         I2cDeviceWriteReg8
               /id0284:
01af ---- 0ae9                         ld          R0, [#i2cDeviceCommonBackupR0]
01b0 ---- 6ccb                         st          R6, [#i2cTempAndHumiditySensor/state/i2cStatus]
               ;?
               ;? // Cancel the potentially active event triggers
               ;? evhCancelTrigger(0);
01b1 ---- 5656                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 0)]
01b2 ---- 655b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
01b3 ---- 455b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 0), [#IOP_SYSIF_WUFLAGSCLR]
               ;? evhCancelTrigger(1);
01b4 ---- 5657                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 0) + 1)]
01b5 ---- 665b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
01b6 ---- 465b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 0) + 1), [#IOP_SYSIF_WUFLAGSCLR]
               i2cTempAndHumiditySensor/terminateDone:
01b7 ---- adb7                         rts
               .segment end "Task: I2C Temp and Humidity Sensor"
               .segment begin "Task: SGP30 Gas Sensor"
               sgp30GasSensor/initialize:
                                       ; Start in low_power mode
01b8 ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;? // Schedule the first execution
               ;? fwScheduleTask(1000);
01b9 8603 03e8                         ld          R0, #1000
01bb ---- 0ca7                         st          R0, [#(pFwTaskExecuteScheduleTable + 1)]
               sgp30GasSensor/initializeDone:
01bc ---- adb7                         rts




               sgp30GasSensor/execute:
                                       ; Start in low_power mode
01bd ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;? U16 resultH = 0;
               ;? U16 resultL = 0;
               ;? U16 resulttvocH = 0;
               ;? U16 resulttvocL = 0;
               ;? U16 dummy = 0;
               ;? U16 crc = 0xFF;
               ;? if (state.i2cStatus == 0x0000) {
01be ---- 08d1                         ld          R0, [#sgp30GasSensor/state/i2cStatus]
01bf ---- 8a00                         cmp         R0, #0
01c0 ---- b601                         beq         /br0000 ; Repaired out-of-range bneq
01c1 ---- 0660                         jmp         /id0093
               /br0000:
               ;?     // If a measurement was successfully started during the last execution ...
               ;?     if (state.sgp30state == SGP30_STATE_INIT) {
01c2 ---- 08d2                             ld          R0, [#sgp30GasSensor/state/sgp30state]
01c3 ---- 8a00                             cmp         R0, #0
01c4 ---- be18                             bneq        /id0096
               ;?         //i2cDeviceWriteReg8(SGP30_I2C_ADDRESS, SGP30_IAQ_CMD, SGP30_IAQ_INIT);
               ;?
               ;?         //    // Configure and start the next measurement
               ;?         i2cStart();
01c5 ---- 6000                                 ld          R6, #0x0000
01c6 ---- 16fe                                 jsr         I2cStart
01c7 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx((SGP30_I2C_ADDRESS << 1) | I2C_OP_WRITE);
01c8 ---- 70b0                                 ld          R7, #176
01c9 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01ca ---- 170e                                 jsr         I2cTxByte
01cb ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx(SGP30_IAQ_CMD);
01cc ---- 7020                                 ld          R7, #32
01cd ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01ce ---- 170e                                 jsr         I2cTxByte
01cf ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx(SGP30_IAQ_INIT);
01d0 ---- 7003                                 ld          R7, #3
01d1 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01d2 ---- 170e                                 jsr         I2cTxByte
01d3 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cStop();
01d4 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01d5 ---- 1703                                 jsr         I2cStop
01d6 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?
               ;?         state.sgp30state = SGP30_STATE_HUMIDITY;
01d7 ---- 0001                                 ld          R0, #1
01d8 ---- 0cd2                                 st          R0, [#sgp30GasSensor/state/sgp30state]
               ;?
               ;?         fwScheduleTask(1000);
01d9 8603 03e8                                 ld          R0, #1000
01db ---- 0ca7                                 st          R0, [#(pFwTaskExecuteScheduleTable + 1)]
               ;?     } else if (state.sgp30state == SGP30_STATE_HUMIDITY) {
01dc ---- 065f                             jmp         /id0098
               /id0096:
01dd ---- 08d2                             ld          R0, [#sgp30GasSensor/state/sgp30state]
01de ---- 8a01                             cmp         R0, #1
01df ---- be29                             bneq        /id0117
               ;?         resultH = input.absoluteHumidity >> 8;
01e0 ---- 08cd                                 ld          R0, [#sgp30GasSensor/input/absoluteHumidity]
01e1 ---- 8da8                                 lsr         R0, #8
               ;?         resultL = input.absoluteHumidity & 0xFF;
01e2 ---- 18cd                                 ld          R1, [#sgp30GasSensor/input/absoluteHumidity]
01e3 ---- 90ff                                 and         R1, #255
               ;?         crc = input.crc & 0xFF;
01e4 ---- 28ce                                 ld          R2, [#sgp30GasSensor/input/crc]
01e5 ---- a0ff                                 and         R2, #255
               ;?
               ;?         //i2cDeviceWriteReg8(SGP30_I2C_ADDRESS, SGP30_IAQ_CMD, SGP30_IAQ_SET_ABSOLUTE_HUMIDITY);
               ;?
               ;?         i2cStart();
01e6 ---- 6000                                 ld          R6, #0x0000
01e7 ---- 16fe                                 jsr         I2cStart
01e8 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx((SGP30_I2C_ADDRESS << 1) | I2C_OP_WRITE);
01e9 ---- 70b0                                 ld          R7, #176
01ea ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01eb ---- 170e                                 jsr         I2cTxByte
01ec ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx(SGP30_IAQ_CMD);
01ed ---- 7020                                 ld          R7, #32
01ee ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01ef ---- 170e                                 jsr         I2cTxByte
01f0 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx(SGP30_IAQ_SET_ABSOLUTE_HUMIDITY);
01f1 ---- 7061                                 ld          R7, #97
01f2 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01f3 ---- 170e                                 jsr         I2cTxByte
01f4 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx(resultH);
01f5 ---- fd40                                 ld          R7, R0
01f6 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01f7 ---- 170e                                 jsr         I2cTxByte
01f8 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx(resultL);
01f9 ---- fd41                                 ld          R7, R1
01fa ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01fb ---- 170e                                 jsr         I2cTxByte
01fc ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx(crc);
01fd ---- fd42                                 ld          R7, R2
01fe ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
01ff ---- 170e                                 jsr         I2cTxByte
0200 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cStop();
0201 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0202 ---- 1703                                 jsr         I2cStop
0203 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?
               ;?         state.sgp30state = SGP30_STATE_MEASURE;
0204 ---- 0010                                 ld          R0, #16
0205 ---- 0cd2                                 st          R0, [#sgp30GasSensor/state/sgp30state]
               ;?
               ;?         fwScheduleTask(10);
0206 ---- 000a                                 ld          R0, #10
0207 ---- 0ca7                                 st          R0, [#(pFwTaskExecuteScheduleTable + 1)]
               ;?     } else if (state.sgp30state == SGP30_STATE_MEASURE) {
0208 ---- 065f                             jmp         /id0119
               /id0117:
0209 ---- 08d2                             ld          R0, [#sgp30GasSensor/state/sgp30state]
020a ---- 8a10                             cmp         R0, #16
020b ---- be14                             bneq        /id0153
               ;?         //i2cDeviceWriteReg8(SGP30_I2C_ADDRESS, SGP30_IAQ_CMD, SGP30_MEASURE_IAQ);
               ;?         i2cStart();
020c ---- 6000                                 ld          R6, #0x0000
020d ---- 16fe                                 jsr         I2cStart
020e ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx((SGP30_I2C_ADDRESS << 1) | I2C_OP_WRITE);
020f ---- 70b0                                 ld          R7, #176
0210 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0211 ---- 170e                                 jsr         I2cTxByte
0212 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx(SGP30_IAQ_CMD);
0213 ---- 7020                                 ld          R7, #32
0214 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0215 ---- 170e                                 jsr         I2cTxByte
0216 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx(SGP30_MEASURE_IAQ);
0217 ---- 7008                                 ld          R7, #8
0218 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0219 ---- 170e                                 jsr         I2cTxByte
021a ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?
               ;?         state.sgp30state = SGP30_STATE_READ;
021b ---- 0100                                 ld          R0, #256
021c ---- 0cd2                                 st          R0, [#sgp30GasSensor/state/sgp30state]
               ;?
               ;?         fwScheduleTask(15);
021d ---- 000f                                 ld          R0, #15
021e ---- 0ca7                                 st          R0, [#(pFwTaskExecuteScheduleTable + 1)]
               ;?     } else if (state.sgp30state == SGP30_STATE_READ) {
021f ---- 065f                             jmp         /id0155
               /id0153:
0220 ---- 08d2                             ld          R0, [#sgp30GasSensor/state/sgp30state]
0221 8601 8a00                             cmp         R0, #256
0223 ---- be34                             bneq        /id0172
               ;?
               ;?         i2cRepeatedStart();
0224 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0225 ---- 16f8                                 jsr         I2cRepeatedStart
0226 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cTx((SGP30_I2C_ADDRESS << 1) | I2C_OP_READ);
0227 ---- 70b1                                 ld          R7, #177
0228 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0229 ---- 170e                                 jsr         I2cTxByte
022a ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cRxAck(resultH);
022b ---- 7000                                 ld          R7, #0x0000
022c ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
022d ---- 173e                                 jsr         I2cRxByte
022e ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
022f ---- 8d47                                 ld          R0, R7
               ;?         i2cRxAck(resultL);
0230 ---- 7000                                 ld          R7, #0x0000
0231 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0232 ---- 173e                                 jsr         I2cRxByte
0233 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
0234 ---- 9d47                                 ld          R1, R7
               ;?         i2cRxAck(dummy);
0235 ---- 7000                                 ld          R7, #0x0000
0236 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0237 ---- 173e                                 jsr         I2cRxByte
0238 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cRxAck(resulttvocH);
0239 ---- 7000                                 ld          R7, #0x0000
023a ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
023b ---- 173e                                 jsr         I2cRxByte
023c ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
023d ---- ad47                                 ld          R2, R7
               ;?         i2cRxAck(resulttvocL);
023e ---- 7000                                 ld          R7, #0x0000
023f ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0240 ---- 173e                                 jsr         I2cRxByte
0241 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
0242 ---- bd47                                 ld          R3, R7
               ;?         i2cRxAck(dummy);
0243 ---- 7000                                 ld          R7, #0x0000
0244 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0245 ---- 173e                                 jsr         I2cRxByte
0246 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?         i2cStop();
0247 ---- 68d1                                 ld          R6, [#sgp30GasSensor/state/i2cStatus]
0248 ---- 1703                                 jsr         I2cStop
0249 ---- 6cd1                                 st          R6, [#sgp30GasSensor/state/i2cStatus]
               ;?
               ;?         output.co2 = (resultH << 8) | (resultL & 0xFF);
024a ---- 8da0                                 lsl         R0, #8
024b ---- 90ff                                 and         R1, #255
024c ---- 8d09                                 or          R0, R1
024d ---- 0ccf                                 st          R0, [#sgp30GasSensor/output/co2]
               ;?         output.tvoc = (resulttvocH << 8) | (resulttvocL & 0xFF);
024e ---- ada0                                 lsl         R2, #8
024f ---- b0ff                                 and         R3, #255
0250 ---- ad0b                                 or          R2, R3
0251 ---- 2cd0                                 st          R2, [#sgp30GasSensor/output/tvoc]
               ;?
               ;?         state.sgp30state = SGP30_STATE_HUMIDITY;
0252 ---- 0001                                 ld          R0, #1
0253 ---- 0cd2                                 st          R0, [#sgp30GasSensor/state/sgp30state]
               ;?
               ;?         fwScheduleTask(980);
0254 8603 03d4                                 ld          R0, #980
0256 ---- 0ca7                                 st          R0, [#(pFwTaskExecuteScheduleTable + 1)]
               ;?     } else {
0257 ---- 065f                             jmp         /id0174
               /id0172:
               ;?         state.sgp30state = SGP30_STATE_HUMIDITY;
0258 ---- 0001                                 ld          R0, #1
0259 ---- 0cd2                                 st          R0, [#sgp30GasSensor/state/sgp30state]
               ;?         // We're using a mix of low-level and high-level I2C procedures in this example, so
               ;?         // clear errors in case the Termination Code runs next
               ;?         state.i2cStatus = 0x0000;
025a ---- 0000                                 ld          R0, #0
025b ---- 0cd1                                 st          R0, [#sgp30GasSensor/state/i2cStatus]
               ;?         fwScheduleTask(1000);
025c 8603 03e8                                 ld          R0, #1000
025e ---- 0ca7                                 st          R0, [#(pFwTaskExecuteScheduleTable + 1)]
               ;?     }
               /id0174:
               /id0155:
               /id0119:
               /id0098:
               ;? } else {
025f ---- 0667                         jmp         /id0095
               /id0093:
               ;?     state.sgp30state = SGP30_STATE_INIT;
0260 ---- 0000                             ld          R0, #0
0261 ---- 0cd2                             st          R0, [#sgp30GasSensor/state/sgp30state]
               ;?     // We're using a mix of low-level and high-level I2C procedures in this example, so
               ;?     // clear errors in case the Termination Code runs next
               ;?     state.i2cStatus = 0x0000;
0262 ---- 0000                             ld          R0, #0
0263 ---- 0cd1                             st          R0, [#sgp30GasSensor/state/i2cStatus]
               ;?     fwScheduleTask(1000);
0264 8603 03e8                             ld          R0, #1000
0266 ---- 0ca7                             st          R0, [#(pFwTaskExecuteScheduleTable + 1)]
               ;? }
               /id0095:
               sgp30GasSensor/executeDone:
0267 ---- adb7                         rts




               sgp30GasSensor/terminate:
                                       ; Start in low_power mode
0268 ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;? // Shut down the light sensor
               ;? i2cStop();
0269 ---- 68d1                         ld          R6, [#sgp30GasSensor/state/i2cStatus]
026a ---- 1703                         jsr         I2cStop
026b ---- 6cd1                         st          R6, [#sgp30GasSensor/state/i2cStatus]
               sgp30GasSensor/terminateDone:
026c ---- adb7                         rts
               .segment end "Task: SGP30 Gas Sensor"
               .segment begin "Task: I2C Light Sensor"
               i2cLightSensor/initialize:
                                       ; Start in low_power mode
026d ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;? // Configure and start the next measurement
               ;? i2cDeviceWriteReg16MsbFirst(ALS_I2C_ADDR, ALS_REG_CFG, ALS_CFG_ONE_SHOT);
026e ---- 5001                         ld          R5, #1
026f 86c2 4210                         ld          R4, #-15856
0271 ---- 68d6                         ld          R6, [#i2cLightSensor/state/i2cStatus]
0272 8602 7277                         ld          R7, #/id0049
0274 ---- 7eec                         st          R7, [#i2cDeviceCommonReturn]
0275 ---- 7088                         ld          R7, #(136 | 0)
0276 ---- 075d                         jmp         I2cDeviceWriteReg16MsbFirst
               /id0049:
0277 ---- 0ae9                         ld          R0, [#i2cDeviceCommonBackupR0]
0278 ---- 6cd6                         st          R6, [#i2cLightSensor/state/i2cStatus]
               ;?
               ;? // Read the result after ~100 milliseconds + a 20% margin
               ;? evhSetupTimer1Trigger(0, 120, 2);
0279 ---- 0078                         ld          R0, #120
027a ---- 8b82                         out         R0, [#IOP_TIMER01_T1TARGET]
027b 8623 0322                         ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
027d ---- 8b7e                         out         R0, [#IOP_TIMER01_T1CFG]
027e ---- 0035                         ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER1_EV
027f ---- 8b58                         out         R0, [#((IOP_SYSIF_PROGWU1CFG + 2) + 0)]
0280 ---- 675b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0281 ---- 475b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
0282 ---- 7658                         iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 2) + 0)]
0283 ---- 6480                         iobset      #0, [#IOP_TIMER01_T1CTL]
               ;?
               ;? state.state = 1;
0284 ---- 0001                         ld          R0, #1
0285 ---- 0cd7                         st          R0, [#i2cLightSensor/state/state]
               i2cLightSensor/initializeDone:
0286 ---- adb7                         rts




               i2cLightSensor/execute:
                                       ; Start in low_power mode
0287 ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;?
               i2cLightSensor/executeDone:
0288 ---- adb7                         rts




               i2cLightSensor/event0:
                                       ; Start in low_power mode
0289 ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;? // Cancel both event triggers
               ;? evhCancelTrigger(0);
028a ---- 5658                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 2) + 0)]
028b ---- 675b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
028c ---- 475b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
               ;?
               ;? if(state.state == 0){
028d ---- 08d7                         ld          R0, [#i2cLightSensor/state/state]
028e ---- 8a00                         cmp         R0, #0
028f ---- be19                         bneq        /id0059
               ;?     // Configure and start the next measurement
               ;?     i2cDeviceWriteReg16MsbFirst(ALS_I2C_ADDR, ALS_REG_CFG, ALS_CFG_ONE_SHOT);
0290 ---- 5001                             ld          R5, #1
0291 86c2 4210                             ld          R4, #-15856
0293 ---- 68d6                             ld          R6, [#i2cLightSensor/state/i2cStatus]
0294 8602 7299                             ld          R7, #/id0062
0296 ---- 7eec                             st          R7, [#i2cDeviceCommonReturn]
0297 ---- 7088                             ld          R7, #(136 | 0)
0298 ---- 075d                             jmp         I2cDeviceWriteReg16MsbFirst
               /id0062:
0299 ---- 0ae9                             ld          R0, [#i2cDeviceCommonBackupR0]
029a ---- 6cd6                             st          R6, [#i2cLightSensor/state/i2cStatus]
               ;?     state.state = 1;
029b ---- 0001                             ld          R0, #1
029c ---- 0cd7                             st          R0, [#i2cLightSensor/state/state]
               ;?
               ;?     // Read the result after ~100 milliseconds + a 20% margin
               ;?     evhSetupTimer1Trigger(0, 120, 2);
029d ---- 0078                             ld          R0, #120
029e ---- 8b82                             out         R0, [#IOP_TIMER01_T1TARGET]
029f 8623 0322                             ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
02a1 ---- 8b7e                             out         R0, [#IOP_TIMER01_T1CFG]
02a2 ---- 0035                             ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER1_EV
02a3 ---- 8b58                             out         R0, [#((IOP_SYSIF_PROGWU1CFG + 2) + 0)]
02a4 ---- 675b                             iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
02a5 ---- 475b                             iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
02a6 ---- 7658                             iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 2) + 0)]
02a7 ---- 6480                             iobset      #0, [#IOP_TIMER01_T1CTL]
               ;? }else{
02a8 ---- 06d8                         jmp         /id0061
               /id0059:
               ;?     // If a measurement was successfully started during the last execution ...
               ;?     if (state.i2cStatus == 0x0000) {
02a9 ---- 08d6                             ld          R0, [#i2cLightSensor/state/i2cStatus]
02aa ---- 8a00                             cmp         R0, #0
02ab ---- be11                             bneq        /id0071
               ;?
               ;?         // Select the result register
               ;?         U16 result;
               ;?         i2cDeviceReadReg16MsbFirst(ALS_I2C_ADDR, ALS_REG_RESULT; result);
02ac ---- 5000                                 ld          R5, #0
02ad ---- 68d6                                 ld          R6, [#i2cLightSensor/state/i2cStatus]
02ae 8602 72b3                                 ld          R7, #/id0074
02b0 ---- 7eec                                 st          R7, [#i2cDeviceCommonReturn]
02b1 ---- 7088                                 ld          R7, #(136 | 0)
02b2 ---- 076c                                 jmp         I2cDeviceReadReg16MsbFirst
               /id0074:
02b3 ---- 0ae9                                 ld          R0, [#i2cDeviceCommonBackupR0]
02b4 ---- 6cd6                                 st          R6, [#i2cLightSensor/state/i2cStatus]
               ;?
               ;?         // If successful ...
               ;?         if (state.i2cStatus == 0x0000) {
02b5 ---- 08d6                                 ld          R0, [#i2cLightSensor/state/i2cStatus]
02b6 ---- 8a00                                 cmp         R0, #0
02b7 ---- be02                                 bneq        /id0080
               ;?
               ;?             // Convert the result (4-bit exponent + 12-bit mantissa) into 16-bit fixed-point
               ;?             //        U16 exp = result >> 12;
               ;?             //        U16 mant = result << 4;
               ;?             // The exponent is in range 0 to 11
               ;?             //        U16 value = mant >> (11 - exp);
               ;?             output.value = result;
02b8 ---- 7cd5                                     st          R7, [#i2cLightSensor/output/value]
               ;?
               ;?             // Notify the application with the result is below the low threshold or above the high threshold
               ;?             //        if (value < cfg.lowThreshold) {
               ;?             //            fwGenAlertInterrupt();
               ;?             //        }
               ;?             //        if (value > cfg.highThreshold) {
               ;?             //            fwGenAlertInterrupt();
               ;?             //        }
               ;?         } else {
02b9 ---- 06bc                                 jmp         /id0082
               /id0080:
               ;?             // We're using a mix of low-level and high-level I2C procedures in this example, so
               ;?             // clear errors in case the Termination Code runs next
               ;?             state.i2cStatus = 0x0000;
02ba ---- 0000                                     ld          R0, #0
02bb ---- 0cd6                                     st          R0, [#i2cLightSensor/state/i2cStatus]
               ;?         }
               /id0082:
               ;?     }else {
02bc ---- 06bf                             jmp         /id0073
               /id0071:
               ;?         // We're using a mix of low-level and high-level I2C procedures in this example, so
               ;?         // clear errors in case the Termination Code runs next
               ;?         state.i2cStatus = 0x0000;
02bd ---- 0000                                 ld          R0, #0
02be ---- 0cd6                                 st          R0, [#i2cLightSensor/state/i2cStatus]
               ;?     }
               /id0073:
               ;?
               ;?     // Configure and start the next measurement
               ;?     i2cDeviceWriteReg16MsbFirst(ALS_I2C_ADDR, ALS_REG_CFG, ALS_CFG_ONE_SHOT);
02bf ---- 5001                             ld          R5, #1
02c0 86c2 4210                             ld          R4, #-15856
02c2 ---- 68d6                             ld          R6, [#i2cLightSensor/state/i2cStatus]
02c3 8602 72c8                             ld          R7, #/id0086
02c5 ---- 7eec                             st          R7, [#i2cDeviceCommonReturn]
02c6 ---- 7088                             ld          R7, #(136 | 0)
02c7 ---- 075d                             jmp         I2cDeviceWriteReg16MsbFirst
               /id0086:
02c8 ---- 0ae9                             ld          R0, [#i2cDeviceCommonBackupR0]
02c9 ---- 6cd6                             st          R6, [#i2cLightSensor/state/i2cStatus]
               ;?
               ;?     state.state = 0;
02ca ---- 0000                             ld          R0, #0
02cb ---- 0cd7                             st          R0, [#i2cLightSensor/state/state]
               ;?     // Read the result after ~1000 milliseconds + a 20% margin
               ;?     evhSetupTimer1Trigger(0, 5000, 2);
02cc 8613 0388                             ld          R0, #5000
02ce ---- 8b82                             out         R0, [#IOP_TIMER01_T1TARGET]
02cf 8623 0322                             ld          R0, #(((2 << IOB_TIMER01_TXCFG_PRE) | TIMER01_TXCFG_TICK_SRC_AON_RTC_4KHZ) | BV_TIMER01_TXCFG_MODE_TICK)
02d1 ---- 8b7e                             out         R0, [#IOP_TIMER01_T1CFG]
02d2 ---- 0035                             ld          R0, #SYSIF_PROGWUCFG_SRC_AUX_TIMER1_EV
02d3 ---- 8b58                             out         R0, [#((IOP_SYSIF_PROGWU1CFG + 2) + 0)]
02d4 ---- 675b                             iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
02d5 ---- 475b                             iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
02d6 ---- 7658                             iobset      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 2) + 0)]
02d7 ---- 6480                             iobset      #0, [#IOP_TIMER01_T1CTL]
               ;?
               ;? }
               /id0061:
               i2cLightSensor/event0Done:
02d8 ---- adb7                         rts




               i2cLightSensor/terminate:
                                       ; Start in low_power mode
02d9 ---- 14a0                         jsr         PwrRequestAndWaitForLowPowerMode

               ;? // Shut down the light sensor
               ;? i2cDeviceWriteReg16MsbFirst(ALS_I2C_ADDR, ALS_REG_CFG, ALS_CFG_RESET);
02da ---- 5001                         ld          R5, #1
02db 86c8 4010                         ld          R4, #-14320
02dd ---- 68d6                         ld          R6, [#i2cLightSensor/state/i2cStatus]
02de 8602 72e3                         ld          R7, #/id0095
02e0 ---- 7eec                         st          R7, [#i2cDeviceCommonReturn]
02e1 ---- 7088                         ld          R7, #(136 | 0)
02e2 ---- 075d                         jmp         I2cDeviceWriteReg16MsbFirst
               /id0095:
02e3 ---- 0ae9                         ld          R0, [#i2cDeviceCommonBackupR0]
02e4 ---- 6cd6                         st          R6, [#i2cLightSensor/state/i2cStatus]
               ;?
               ;? // Cancel the potentially active event trigger
               ;? evhCancelTrigger(0);
02e5 ---- 5658                         iobclr      #IOB_SYSIF_PROGWUCFG_EN, [#((IOP_SYSIF_PROGWU1CFG + 2) + 0)]
02e6 ---- 675b                         iobset      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
02e7 ---- 475b                         iobclr      #((IOB_SYSIF_WUFLAGS_PROG_WU1 + 2) + 0), [#IOP_SYSIF_WUFLAGSCLR]
               i2cLightSensor/terminateDone:
02e8 ---- adb7                         rts
               .segment end "Task: I2C Light Sensor"


               .segment begin "Procedure Library"
               ; Register backup
               i2cDeviceCommonBackupR0:
02e9 ---- 0000                         dw          #0x0000
               i2cDeviceCommonBackupR5:
02ea ---- 0000                         dw          #0x0000
               i2cDeviceCommonBackupR7:
02eb ---- 0000                         dw          #0x0000

               ; Return address i2cDeviceXyz() procedures
               i2cDeviceCommonReturn:
02ec ---- 0000                         dw          #0x0000




               ; PARAMETERS:
               ;     R7 = I2C address
               ;     R6 = Status flags
               ;     R5 = Register address
               ;     R4 = Register value
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5, R7
               ;     R0 must be restored from i2cDeviceCommonBackupR0 after return
               I2cDeviceWriteReg8:
                                       ; Backup R0 (return) and R5 (register address)
02ed ---- 0ee9                         st          R0, [#i2cDeviceCommonBackupR0]
02ee ---- 5eea                         st          R5, [#i2cDeviceCommonBackupR5]

                                       ; Start condition
02ef ---- 16fe                         jsr         I2cStart

                                       ; Transmit the I2C address
02f0 ---- 170e                         jsr         I2cTxByte

                                       ; Transmit the register address
02f1 ---- 7aea                         ld          R7, [#i2cDeviceCommonBackupR5]
02f2 ---- 170e                         jsr         I2cTxByte

                                       ; Transmit the register value
02f3 ---- fd44                         ld          R7, R4
02f4 ---- 170e                         jsr         I2cTxByte

                                       ; Load the return address here to avoid pipeline hazard with "jmp R0"
02f5 ---- 0aec                         ld          R0, [#i2cDeviceCommonReturn]

                                       ; Stop condition
02f6 ---- 1703                         jsr         I2cStop

                                       ; Done
02f7 ---- 8db7                         jmp         R0




               ; CLOBBERS:
               ;     R5
               I2cRepeatedStart:
                                       ; Wait T_LOW (SDA is already pull-up)
02f8 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
02f9 ---- 172c                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
02fa ---- 76bb                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
02fb ---- 172f                         jsr         I2cWaitSclStretch

                                       ; Wait T_SU_STA
02fc ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
02fd ---- 172c                         jsr         I2cWaitDelay
               I2cStart:
                                       ; SDA = driven low
02fe ---- 55bb                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_HD_STA
02ff ---- 53f8                         ld          R5, #-((I2C_BASE_DELAY) - (1))
0300 ---- 172c                         jsr         I2cWaitDelay

                                       ; SCL = driven low
0301 ---- 56bb                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Done
0302 ---- adb7                         rts




               ; CLOBBERS:
               ;     R5
               I2cStop:
                                       ; SDA = driven low
0303 ---- 55bb                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_LOW
0304 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0305 ---- 172c                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
0306 ---- 76bb                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
0307 ---- 172f                         jsr         I2cWaitSclStretch

                                       ; Wait T_SU_STO
0308 ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
0309 ---- 172c                         jsr         I2cWaitDelay

                                       ; SDA = pull-up
030a ---- 75bb                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_BUF
030b ---- 53f5                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
030c ---- 172c                         jsr         I2cWaitDelay

                                       ; Done
030d ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = TX byte shift register
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = Updated TX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cTxByte:
                                       ; Bail out if an error has occurred
030e ---- ea00                         cmp         R6, #0
030f ---- be1b                         bnz         /done


                                       ; Transmit each bit in the data byte ...
0310 ---- b50e                         loop        #8, /byteLoopEnd

                                           ; Output the bit to SDA
0311 ---- fda1                             lsl         R7, #1
0312 8601 fc00                             tst         R7, #0x0100
0314 ---- b602                             bz          /dataSdaLow
0315 ---- 75bb /dataSdaHigh:                   iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0316 ---- 8e02                             bra         /dataSdaDone
0317 ---- 55bb /dataSdaLow:                    iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0318 ---- fd47                             nop
               /dataSdaDone:
                                           ; Wait T_LOW
0319 ---- 53fa                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (7))
031a ---- 172c                             jsr         I2cWaitDelay

                                           ; SCL = pull-up
031b ---- 76bb                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                           ; Wait for SCL stretching to end or time out
031c ---- 172f                             jsr         I2cWaitSclStretch

                                           ; Wait T_HIGH
031d ---- 53fd                             ld          R5, #-(I2C_BASE_DELAY - (I2C_WAIT_STRETCH_DELAY + 1))
031e ---- 172c                             jsr         I2cWaitDelay

                                           ; SCL = driven low
031f ---- 56bb                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:

                                       ; Receive the ACK bit
                                       ; SDA = pull-up
0320 ---- 75bb                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_LOW
0321 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0322 ---- 172c                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
0323 ---- 76bb                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
0324 ---- 172f                         jsr         I2cWaitSclStretch

                                       ; Wait T_HIGH
0325 ---- 53fa                         ld          R5, #-((I2C_BASE_DELAY) - (3))
0326 ---- 172c                         jsr         I2cWaitDelay

                                       ; Read and store the SDA value in the status word
0327 ---- 35bf                         iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
0328 ---- a601                         biob0       /ackSdaLow
0329 ---- e201                             or          R6, #0x01
               /ackSdaLow:
                                       ; SCL = driven low
032a ---- 56bb                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]


               /done:                  ; Done
032b ---- adb7                         rts




               ; PARAMETERS
               ;     R5 = Delay excluding the I2cWaitDelay() call, in instruction cycles
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitDelay:
                                       ; Wait for the specified number of cycles
032c ---- d802 /waitLoop:                  add         R5, #2
032d ---- defe                         bneg        /waitLoop

                                       ; Done
032e ---- adb7                         rts




               ; PARAMETERS:
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitSclStretch:
                                       ; Load the timeout (up to 20 ms) loop counter = configured number of us
032f ---- 53f6                         ld          R5, #(-I2C_STRETCH_TIMEOUT_US)
               /waitLoop:
                                           ; If SCL is high, we're done
0330 ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0331 ---- ae0b                             biob1       /done
                                           ; Unroll the loop to 12 instructions = 1 per loop for faster response
0332 ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0333 ---- ae09                             biob1       /done
0334 ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0335 ---- ae07                             biob1       /done
0336 ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0337 ---- ae05                             biob1       /done
0338 ---- 36bf                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0339 ---- ae03                             biob1       /done

033a ---- d801                         add         R5, #1;
033b ---- bef4                         bnz         /waitLoop

               /timeout:               ; Timeout has occurred, so OR it into the flags and bail out
033c ---- e202                         or          R6, #0x0002

               /done:                  ; Done
033d ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = Acknowledgment bit value, 0x0000 to transmit ACK, 0x0001 to transmit NAK
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = RX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cRxByte:
                                       ; Bail out if an error has occurred
033e ---- ea00                         cmp         R6, #0
033f ---- be1c                         bnz         /done


                                       ; Receive each bit in the data byte ...
0340 ---- b50b                         loop        #8, /byteLoopEnd

                                           ; SDA = pull-up
0341 ---- 75bb                             iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                           ; Wait T_LOW
0342 ---- 53f5                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
0343 ---- 172c                             jsr         I2cWaitDelay

                                           ; SCL = pull-up
0344 ---- 76bb                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                           ; Wait for SCL stretching to end or time out
0345 ---- 172f                             jsr         I2cWaitSclStretch

                                           ; Wait T_HIGH
0346 ---- 53ff                             ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 3))
0347 ---- 172c                             jsr         I2cWaitDelay

                                           ; Read and store SDA
0348 ---- fda1                             lsl         R7, #1
0349 ---- 35bf                             iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
034a ---- a601                             biob0       /dataSdaLow
034b ---- f201                                 or          R7, #0x01
               /dataSdaLow:
                                           ; SCL = driven low
034c ---- 56bb                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:

                                       ; Transmit the ACK bit, which is now in bit 8 of the shift register
                                       ; Output the bit to SDA
034d 8601 fc00                         tst         R7, #0x0100
034f ---- b602                         bz          /ackSdaLow
0350 ---- 75bb /ackSdaHigh:                iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0351 ---- 8e02                         bra         /ackSdaDone
0352 ---- 55bb /ackSdaLow:                 iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0353 ---- fd47                         nop
               /ackSdaDone:
                                       ; Wait T_LOW
0354 ---- 53f9                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (6))
0355 ---- 172c                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
0356 ---- 76bb                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
0357 ---- 172f                         jsr         I2cWaitSclStretch

                                       ; Wait T_HIGH
0358 ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
0359 ---- 172c                         jsr         I2cWaitDelay

                                       ; SCL = driven low
035a ---- 56bb                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Mask the ACK bit in the received data
035b ---- f0ff                         and         R7, #0xFF


               /done:                  ; Done
035c ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = I2C address
               ;     R6 = Status flags
               ;     R5 = Register address
               ;     R4 = Register value
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5, R7
               ;     R0 must be restored from i2cDeviceCommonBackupR0 after return
               I2cDeviceWriteReg16MsbFirst:
                                       ; Backup R0 (return) and R5 (register address)
035d ---- 0ee9                         st          R0, [#i2cDeviceCommonBackupR0]
035e ---- 5eea                         st          R5, [#i2cDeviceCommonBackupR5]

                                       ; Start condition
035f ---- 16fe                         jsr         I2cStart

                                       ; Transmit the I2C address
0360 ---- 170e                         jsr         I2cTxByte

                                       ; Transmit the register address
0361 ---- 7aea                         ld          R7, [#i2cDeviceCommonBackupR5]
0362 ---- 170e                         jsr         I2cTxByte

                                       ; Transmit MSB of the register value
0363 ---- fd44                         ld          R7, R4
0364 ---- fda8                         lsr         R7, #8
0365 ---- 170e                         jsr         I2cTxByte

                                       ; Transmit LSB of the register value
0366 ---- fd44                         ld          R7, R4
0367 ---- f0ff                         and         R7, #0xFF
0368 ---- 170e                         jsr         I2cTxByte

                                       ; Load the return address here to avoid pipeline hazard with "jmp R0"
0369 ---- 0aec                         ld          R0, [#i2cDeviceCommonReturn]

                                       ; Stop condition
036a ---- 1703                         jsr         I2cStop

                                       ; Done
036b ---- 8db7                         jmp         R0




               ; PARAMETERS:
               ;     R7 = I2C address
               ;     R6 = Status flags
               ;     R5 = Register address
               ;
               ; RETURN VALUES:
               ;     R7 = Register value
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5, R7
               ;     R0 must be restored from i2cDeviceCommonBackupR0 after return
               I2cDeviceReadReg16MsbFirst:
                                       ; Backup R0 (return), R5 (register address) and R7 (I2C address)
036c ---- 0ee9                         st          R0, [#i2cDeviceCommonBackupR0]
036d ---- 5eea                         st          R5, [#i2cDeviceCommonBackupR5]
036e ---- 7eeb                         st          R7, [#i2cDeviceCommonBackupR7]

                                       ; Start condition
036f ---- 16fe                         jsr         I2cStart

                                       ; Transmit the I2C address
0370 ---- 170e                         jsr         I2cTxByte

                                       ; Transmit the register address
0371 ---- 7aea                         ld          R7, [#i2cDeviceCommonBackupR5]
0372 ---- 170e                         jsr         I2cTxByte

                                       ; If no error is indicated ...
0373 ---- ea00                         cmp         R6, #0x0000
0374 ---- be0b                         bneq        /skipRx

                                           ; Repeated start condition
0375 ---- 16f8                             jsr         I2cRepeatedStart

                                           ; Transmit the I2C address + R
0376 ---- 7aeb                             ld          R7, [#i2cDeviceCommonBackupR7]
0377 ---- f201                             or          R7, #0x0001
0378 ---- 170e                             jsr         I2cTxByte

                                           ; Receive MSB of the register value (transmit ACK)
0379 ---- 7000                             ld          R7, #0x0000
037a ---- 173e                             jsr         I2cRxByte
037b ---- 8d47                             ld          R0, R7
037c ---- 8da0                             lsl         R0, #8

                                           ; Receive the register value (transmit NAK)
037d ---- 7001                             ld          R7, #0x0001
037e ---- 173e                             jsr         I2cRxByte
037f ---- fd08                             or          R7, R0
               /skipRx:
                                       ; Load the return address here to avoid pipeline hazard with "jmp R0"
0380 ---- 0aec                         ld          R0, [#i2cDeviceCommonReturn]

                                       ; Stop condition
0381 ---- 1703                         jsr         I2cStop

                                       ; Done
0382 ---- 8db7                         jmp         R0
               .segment end "Procedure Library"


; Generated by DESKTOP-MRBABVC at 2020-06-23 20:39:47.360
